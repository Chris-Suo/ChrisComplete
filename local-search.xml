<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>山峽一日遊</title>
    <link href="/ChrisComplete/2023/09/04/Sanxia/"/>
    <url>/ChrisComplete/2023/09/04/Sanxia/</url>
    
    <content type="html"><![CDATA[<h2 id="順從生命的機遇"><a href="#順從生命的機遇" class="headerlink" title="順從生命的機遇"></a>順從生命的機遇</h2><p>原本這週是打算實現之前答應隊友的拉拉山之旅，沒想到遇到海葵颱風攪局。<br>不確定風雨會如何變化，但還是想出門走走，臨時找了個離家不遠的小山-鳶山，來場小小的探險。<br>一路上天空還飄著雨，開著車循著導航提供的路線走了一條崎嶇蜿蜒的山路，加上雨天視線不良，其實不是很好開，戰戰競競的終於上了山（雖然下山的時候發現有另一條路更寬更好走Orz）。<br>實際到了鳶山發現景觀很棒，恰巧雨也停了，陽光驅散霧氣後可以瞭望到很遠的地方，甚至可以看到101。<br>下面還有高速公路經過，自然與文明和諧的共處在一個畫面裡，內心很平靜。<br>真心感謝生命帶給我們的驚喜，用“順從”來當標題，提醒自己時時刻刻覺察自己，包容、接受與感恩生命中的所有體驗。</p><h2 id="鳶山"><a href="#鳶山" class="headerlink" title="鳶山"></a>鳶山</h2><p>在停車場附近的鳶山大鐘，先擺個”鐘二“的pose。<br><img src="/ChrisComplete/img/sanxia/sanxia_01.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_02.jpg"></p><p>從停車場到山頂其實沒有很遠，一路上聽著雨聲很療癒，到山頂享受廣闊的風景，沈澱一下心情，與大自然連接，校準一下自己。<br><img src="/ChrisComplete/img/sanxia/sanxia_03.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_04.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_05.jpg"></p><p>陽光驅散霧氣後，眺望遠方的景觀。<br><img src="/ChrisComplete/img/sanxia/sanxia_06.jpg"></p><h2 id="山峽老街"><a href="#山峽老街" class="headerlink" title="山峽老街"></a>山峽老街</h2><p>鳶山其實就在山峽老街附近，下山之後索性就到老街來覓食。<br>很久沒來山峽老街了，感覺好像跟上次來的時候變化了許多。<br><img src="/ChrisComplete/img/sanxia/sanxia_07.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_08.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_09.jpg"></p><p>“貝比我找到食物啦～！”（設計對白）<br><img src="/ChrisComplete/img/sanxia/sanxia_10.jpg"></p><p>在老街悠悠哉哉的閒晃，吃點小吃，然後在河堤邊聊聊天，這週末挺放鬆的。<br><img src="/ChrisComplete/img/sanxia/sanxia_11.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_12.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_13.jpg"><br><img src="/ChrisComplete/img/sanxia/sanxia_14.jpg"></p><p>最後用一張隊友的照片作結尾吧。<br>“我肚子餓餓了～走不動了啦～”（設計對白）<br><img src="/ChrisComplete/img/sanxia/sanxia_15.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>遊記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>山峽</tag>
      
      <tag>鳶山</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>做自己的生命設計師</title>
    <link href="/ChrisComplete/2023/04/16/DesigningYourLife/"/>
    <url>/ChrisComplete/2023/04/16/DesigningYourLife/</url>
    
    <content type="html"><![CDATA[<h2 id="前言：人生是「設計」出來的"><a href="#前言：人生是「設計」出來的" class="headerlink" title="前言：人生是「設計」出來的"></a>前言：人生是「設計」出來的</h2><p>真正的快樂來自打造適合自己的人生。<br>設計生命需要五種心態：<br>好奇心 curosity<br>行動導向 bias to action<br>重擬問題 reframing<br>覺察 awareness<br>通力合作 radical collaboation</p><h2 id="從此時此地做起"><a href="#從此時此地做起" class="headerlink" title="從此時此地做起"></a>從此時此地做起</h2><p>找出問題+解決問題&#x3D;擁有優秀設計藍圖的人生</p><p>區別重力問題：無法行動的問題。</p><p>生命設計診斷：<br>首先必須把人生分成幾塊不同的領域：健康、工作、遊戲與愛</p><p>健康&#x2F;工作&#x2F;遊戲&#x2F;愛的儀表板(HWPL)</p><ol><li>針對四個領域寫下幾句話，描述目前的狀況。</li><li>在四個領域的儀表板上，標出自己目前的狀態(零到滿格)。</li><li>問一問自己，在這些領域，是否有想要解決的設計問題。</li><li>再問一問自己，那個問題是否為重力問題。</li></ol><h2 id="給自己一個人生羅盤"><a href="#給自己一個人生羅盤" class="headerlink" title="給自己一個人生羅盤"></a>給自己一個人生羅盤</h2><p>有一致性的人生可以清楚串起三件事：你是誰 你的信念是什麼 你目前在做什麼</p><p>找出工作觀：<br>為什麼要工作？<br>工作是為了什麼？<br>工作的意義是什麼？<br>工作和個人、他人、社會有什麼關聯？<br>什麼叫好工作或值得做的工作？<br>金錢和工作的關聯是什麼？<br>經歷、成長、成就感和工作的關連是什麼？</p><p>找出人生觀：<br>人活在世上是為了什麼？<br>人生的意義或目的是什麼？<br>個人與他人之間的關聯是什麼？<br>家庭、國家與世上的其他事情，對我的人生有什麼意義？<br>什麼是善，什麼是惡？<br>世上是否有更崇高的力量，例如神或其他至高無上的事物？有的話，那對你的人生造成什麼影響？<br>喜悅、悲傷、正義、不公不義、愛、和平、衝突，在人生中扮演什麼角色？</p><p>整合：<br>我的工作觀與人生觀有哪些相輔相成的地方？<br>哪些地方彼此矛盾？<br>工作觀能否促進人生觀？人生觀能否促進工作觀？怎麼說？</p><h2 id="找出一條路"><a href="#找出一條路" class="headerlink" title="找出一條路"></a>找出一條路</h2><p>找出路的兩個線索：投入程度、精力</p><p>投入程度：<br>寫好時光日誌(good time journal)，寫下工作時感到無聊、心不在焉的時候，自己在做的事情 與 感到專注興奮時自己在做的事情。<br>心流：全神貫注</p><p>精力：<br>追蹤自己的精力流。</p><p>跟著樂趣走。</p><p>好時光日誌：<br>活動紀錄(記錄自己專注、精力充沛的時刻)<br>反省(發現自己學到什麼)</p><p>聚焦，以好時光日誌得到的紀錄做更詳盡的分析。<br>AEIOU法：<br>Activities活動：實際上在做什麼事？<br>Enviornment環境：身處的地方<br>Interactions互動：互動的對象<br>Object物品：互動的物品<br>User使用者：一旁有誰？</p><p>回顧過去的輝煌時刻</p><h2 id="卡住怎麼辦"><a href="#卡住怎麼辦" class="headerlink" title="卡住怎麼辦"></a>卡住怎麼辦</h2><p>先知道自己可能要什麼，才會知道自己真正要什麼，因此必須發想眾多點子與可能性。</p><p>發想一下：大量瘋狂的點子<br>兩個原則：</p><ol><li>有大量點子可以選，就能做出更好的選擇</li><li>不論要解決什麼問題，千萬別碰到第一個解決方案就選了</li></ol><p>心智圖</p><ol><li>選定一個主題</li><li>畫心智圖</li><li>靠著「二次連結」發想出概念(把所有點子混合在一起)</li></ol><p>船錨問題：<br>不要死抓著第一個想到的點子</p><p>設計原型：快速失敗，在失敗中前進(fast fail and fast forward)</p><p>畫三張心智圖：</p><ol><li>專注：從好時光日誌挑選一個自己感興趣的領域或全心投入的活動</li><li>精力：從好時光日誌挑選一個讓自己感到特別有活力的人事物</li><li>心流：從好時裝日誌挑選自己進入心流的體驗</li></ol><p>畫好三張心智圖之後，替每一張設想一種人生</p><h2 id="自己的生命，自己設計"><a href="#自己的生命，自己設計" class="headerlink" title="自己的生命，自己設計"></a>自己的生命，自己設計</h2><p>多重人格是好事<br>奧德賽計畫：寫出接下來五年，人生可能的三種版本<br>不是A計畫、B計畫，所有的版本都是不同的人生，都是A計畫。</p><p>人生一：你目前做的事<br>人生二：萬一事情生變，你會做的事<br>人生三：如果錢不是問題，面子不是問題，你會做的事，或你想活的人生</p><p>奧德賽計畫101<br>替未來五年想出三個版本的人生，每個版本都需要包括：</p><ol><li>一條視覺&#x2F;圖示時間軸。個人生活以及與事業無關的事也要放上去。</li><li>替專案取個名字，點出主要精神。</li><li>寫下那個計畫要問的問題。替每條可能的時間軸研究各種可能性。</li><li>在儀表板上評估幾件事：<br> a. 資源(時間、金錢、技能、人脈等)<br> b. 喜歡程度<br> c. 自信程度<br> d. 一致性</li><li>可能的考量：<br>地點-要住哪？<br>你會獲得什麼經驗？會學到什麼？<br>選擇這個人生會帶來的影響&#x2F;結果？<br>人生會是什麼樣子？扮演什麼角色？在什麼產業或公司？</li><li>其他點子：<br>金錢與事業之外的事情也要考慮。</li></ol><h2 id="打造原型"><a href="#打造原型" class="headerlink" title="打造原型"></a>打造原型</h2><p>如何打造原型？<br>打造原型的目的是提問、製造體驗、找出成見、快速失敗，在失敗中前進、偷窺一下未來，促進自己與他人的同理心。</p><p>原型對話–生命設計訪談</p><p>原型體驗</p><p>腦力激盪原型體驗<br>腦力激盪應用兩個原則：</p><ol><li>大量提出點子，重量不重質</li><li>先不批評，免得自己在腦中審查點子</li></ol><p>腦力激盪流程：</p><ol><li>擬出好問題<br>不要再題目中定義了解答<br>不要限制範圍</li><li>暖身</li><li>進入腦力激盪時間<br>腦力激盪原則：<br> a. 重量不重質<br> b. 晚一點再批評，不要覺得有些點子不該提<br> c. 接力別人的點子<br> d. 鼓勵瘋狂的點子</li><li>取名字與整理點子</li></ol><h2 id="找「不」到工作的方法"><a href="#找「不」到工作的方法" class="headerlink" title="找「不」到工作的方法"></a>找「不」到工作的方法</h2><p>網路上的工作描述一般不是徵人的主管寫的，也並非出自真正了解那份工作的人。<br>職缺說明幾乎從來不會提到那份工作真正的條件。</p><p>上網找工作更有效率的秘訣：</p><ol><li>重寫履歷，職缺說明怎麼寫就照著寫。</li><li>如果有徵人啟事上要求的技能，放進履歷時就用一模一樣的用語。</li><li>徵才啟事要什麼，履歷中就寫那些事情就好。</li><li>面試時永遠帶著印的漂漂亮亮、剛出爐的履歷。</li></ol><p>拿香蕉請獅子症候群<br>假職缺症候群<br>小心酷炫公司與偽陽性</p><h2 id="設計夢幻工作"><a href="#設計夢幻工作" class="headerlink" title="設計夢幻工作"></a>設計夢幻工作</h2><p>人：另一種全球資訊網<br>建立人脈不過是請人指點迷津</p><p>把重點擺在工作機會，而不是工作。</p><h2 id="選擇幸福"><a href="#選擇幸福" class="headerlink" title="選擇幸福"></a>選擇幸福</h2><p>選擇沒有正不正確可言，重點是用好方法做出選擇。</p><p>生命設計的選擇流程：</p><ol><li>蒐集與創造選項</li><li>篩選清單<br>果醬實驗-減少選項，把選項變成選擇<br>披薩中國菜效應：做了決定後才會知道自己真正的偏好。</li><li>靠判斷力做選擇<br>大腦基底核並非靠語言溝通，而是靠感受與直覺。<br>要明白自己的感受才有辦法做出明智的決定。<br>判斷力是應用一種以上的「知」：<br>認知之知：理智、客觀、有組織與資訊有關<br>靈性之知：直覺、情緒等<br>社交之知：認識他人<br>運動之知：認識自己的身體</li></ol><p>心領神會(grokking)的練習：用幾天的時間假裝自己做出某個選擇，用那個心態生活。</p><ol start="4"><li>苦惱不已&#x2F;放手往前走<br>莫內畫實驗：有選擇反而讓我們看清自己的決定。<br>有疑慮就放手，未來有更多選項</li></ol><h2 id="對失敗免疫"><a href="#對失敗免疫" class="headerlink" title="對失敗免疫"></a>對失敗免疫</h2><p>不是避免失敗，而是避免失敗帶來的負面情緒。<br>生命是一段過程，而非結果。<br>有限與無限的遊戲。</p><p>「所是(human beings)」與「所做(human doings)」<br>思考生命流程循環：<br>從自己是誰開始，提出許多點子，試著做做看，做出最佳選擇。</p><p>失敗重擬練習：</p><ol><li><p>記錄自己的失敗</p></li><li><p>分類失敗<br>分為三類：<br>失誤(screwup)：通常會做對的事情出現簡單的錯誤，承認自己搞砸了，繼續往前走。<br>弱點(weakness)：一直存在的缺點帶來的錯誤，改善或避免。<br>成長機會(growth opportunity)：不必發生的錯誤，重點放在修正此類錯誤。</p></li><li><p>找出成長心得</p></li></ol><p>別和現實做對</p><h2 id="建立團隊"><a href="#建立團隊" class="headerlink" title="建立團隊"></a>建立團隊</h2><p>共同立場<br>去認識別人，也讓別人認識我們</p><p>組成團隊流程：</p><ol><li>列出三到五位生命設計團隊的潛在成員。想一想誰是支持者、親友團、導師，以及可能成為導師的人士。這三到五人，最好也正在積極設計自己的生命。</li><li>確認每個人手上都有這本書，每個隊員都了解生命設計的原理，檢視過團隊角色與規則。</li><li>約好定期見面，以社群的形式，積極共同創造經過設計的生命。</li></ol><h2 id="結語：好好設計生命之後"><a href="#結語：好好設計生命之後" class="headerlink" title="結語：好好設計生命之後"></a>結語：好好設計生命之後</h2><p>平衡的人生要看長期。<br>不要跟現實作對，看著現實，接受自己目前的處境。</p>]]></content>
    
    
    <categories>
      
      <category>閱讀筆記</category>
      
      <category>自我成長</category>
      
    </categories>
    
    
    <tags>
      
      <tag>設計思維</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>馬祖追藍眼淚</title>
    <link href="/ChrisComplete/2023/04/09/Matsu/"/>
    <url>/ChrisComplete/2023/04/09/Matsu/</url>
    
    <content type="html"><![CDATA[<h2 id="行前規劃"><a href="#行前規劃" class="headerlink" title="行前規劃"></a>行前規劃</h2><p>聽說4~6月是藍眼淚爆棚的季節，隊友說追藍眼淚是他的人生夢想清單項目之一，剛巧4月份有清明連假，想想自己也沒去過馬祖，所以就有了這次的行程。<br>大約出發前一個月開始訂機票與飯店，其實要到馬祖也可以選擇搭船，不過我們是選擇比較快速的方法。</p><p>要飛馬祖的話有兩家航空公司：立榮航空與華信航空，我們選擇班次較多的立榮，可以由台北松山機場或台中機場飛。系統一開放購票我們就開始搶票，熱門時段大概跟搶演唱會門票差不多，當時為了怕搶不到機票，一有空位就先訂下來，原本想說找到好時段之後再把多買的機票退掉，後來發現退票需要扣10%的手續費，還沒出發就先噴了一筆錢…下次絕對要記取這個教訓。</p><p>飯店的話可能需要更早訂，提前一個月從booking上也只剩一間民宿可以選，所以就沒有什麼好考慮的直接下訂了。</p><p>另外在島上的移動我們有租借機車，其他有些景點或餐廳最好提前預約，這些我們也都有事先安排，沒辦法，身為摩羯座不事先規劃好會很焦慮。</p><h2 id="行程表"><a href="#行程表" class="headerlink" title="行程表"></a>行程表</h2><p>出發前先規劃了大致的行程，除了其中一天跳島去了北竿，其他時間主要都在南竿，因此一開始的規劃是將南竿分為三個區域，一天玩一個區域。<br>不過其實整個南竿也不大，大約20分鐘就可以環島一圈，所以隨性亂玩也玩得完，而實際上我們也沒有完全照行程走，行程表的用意主要是確保我們想去的景點都有造訪。<br>另外其實有些景點不大可以不用待那麼久，下次有機會再去的話應該試試跳島玩，四鄉五島其實一天一島排個5天也很夠了。</p><h3 id="4-x2F-2-日"><a href="#4-x2F-2-日" class="headerlink" title="4&#x2F;2(日)"></a>4&#x2F;2(日)</h3><table><thead><tr><th>時刻</th><th>地點</th><th>備註</th></tr></thead><tbody><tr><td>6:27</td><td>大園站</td><td></td></tr><tr><td>7:27</td><td>台北車站</td><td></td></tr><tr><td>7:43</td><td>松山機場</td><td></td></tr><tr><td>9:30 ~ 10:25</td><td>飛機</td><td></td></tr><tr><td>11:00</td><td>民宿(津沙聽海民宿)checkin</td><td></td></tr><tr><td>12:00</td><td>南竿遊客中心</td><td>連江縣南竿鄉仁愛村95-2號(08:00~17:30)</td></tr><tr><td>12:00 ~ 13:00</td><td>大漢據點</td><td></td></tr><tr><td>13:00 ~ 14:00</td><td>龍貓隧道</td><td></td></tr><tr><td>14:00 ~ 15:00</td><td>鐵堡</td><td></td></tr><tr><td>15:00 ~ 17:00</td><td>遊客中心</td><td>晚餐</td></tr><tr><td>17:00 ~ 19:00</td><td>仁愛沙灘</td><td></td></tr><tr><td>19:00 ~</td><td>津沙聚落 or 馬港商店街</td><td></td></tr></tbody></table><h3 id="4-x2F-3-一"><a href="#4-x2F-3-一" class="headerlink" title="4&#x2F;3(一)"></a>4&#x2F;3(一)</h3><table><thead><tr><th>時刻</th><th>地點</th><th>備註</th></tr></thead><tbody><tr><td>6:00</td><td>介壽獅子市場</td><td>早餐</td></tr><tr><td>10:00 ~ 11:00</td><td>媽祖巨神像</td><td></td></tr><tr><td>11:00 ~ 11:30</td><td>祈福坑道</td><td></td></tr><tr><td>11:30 ~ 12:30</td><td>馬祖港</td><td>午餐</td></tr><tr><td>12:30 ~ 13:00</td><td>馬祖劍碑</td><td></td></tr><tr><td>13:00 ~ 14:00</td><td>梅石營區軍官特約茶室</td><td>營業時間 9:00~16:00</td></tr><tr><td>14:00 ~ 16:00</td><td>藍眼淚生態館</td><td>可事先預約</td></tr><tr><td>16:00 ~ 18:00</td><td>馬祖民俗文物館</td><td></td></tr><tr><td>20:00</td><td>北海坑道</td><td>搖櫓船觀賞藍眼淚，可事先預約</td></tr></tbody></table><h3 id="4-x2F-4-二"><a href="#4-x2F-4-二" class="headerlink" title="4&#x2F;4(二)"></a>4&#x2F;4(二)</h3><table><thead><tr><th>時刻</th><th>地點</th><th>備註</th></tr></thead><tbody><tr><td>6:00</td><td>介壽獅子市場</td><td>早餐</td></tr><tr><td>09:00 ~ 09:30</td><td>珠螺村</td><td></td></tr><tr><td>09:30 ~ 10:30</td><td>勝利堡</td><td></td></tr><tr><td>10:30 ~ 11:00</td><td>清水村</td><td></td></tr><tr><td>11:00 ~ 13:00</td><td>枕戈待旦紀念公園</td><td>午餐(枕戈待旦餐廳)</td></tr><tr><td>13:00 ~ 14:00</td><td>星巴克馬祖門市</td><td></td></tr><tr><td>14:00 ~ 15:00</td><td>牛峰境</td><td></td></tr><tr><td>15:00 ~ 16:00</td><td>摩天嶺步道</td><td></td></tr><tr><td>16:00 ~ 16:30</td><td>八八坑道</td><td></td></tr><tr><td>16:30 ~ 17:00</td><td>馬祖酒廠</td><td></td></tr><tr><td>17:00 ~ 19:00</td><td>牛角沙灘</td><td></td></tr></tbody></table><h3 id="4-x2F-5-三"><a href="#4-x2F-5-三" class="headerlink" title="4&#x2F;5(三)"></a>4&#x2F;5(三)</h3><p>至北竿</p><table><thead><tr><th>時刻</th><th>地點</th><th>備註</th></tr></thead><tbody><tr><td>07:00 ~ 07:15</td><td>船程</td><td></td></tr><tr><td>07:15 ~ 08:30</td><td>螺蚌山</td><td>1H</td></tr><tr><td>08:30 ~ 09:30</td><td>塘后道沙灘</td><td></td></tr><tr><td>09:30 ~ 10:00</td><td>馬鼻灣</td><td></td></tr><tr><td>10:00 ~ 10:30</td><td>短坡山觀景台</td><td></td></tr><tr><td>10:30 ~ 12:00</td><td>壁山</td><td></td></tr><tr><td>12:00 ~ 13:00</td><td>塘岐村</td><td>鏡沃小吃</td></tr><tr><td>13:00 ~ 14:00</td><td>芹壁村</td><td></td></tr><tr><td>14:00 ~ 14:30</td><td>馬祖播音站</td><td></td></tr><tr><td>14:30 ~ 15:30</td><td>坂里沙灘 坂里大宅</td><td></td></tr><tr><td>15:30 ~ 16:30</td><td>尼姑山</td><td>夾竹桃隧道 蛤蜊島</td></tr><tr><td>16:30 ~</td><td>返回南竿</td><td></td></tr></tbody></table><h3 id="4-x2F-6-四"><a href="#4-x2F-6-四" class="headerlink" title="4&#x2F;6(四)"></a>4&#x2F;6(四)</h3><table><thead><tr><th>時刻</th><th>地點</th><th>備註</th></tr></thead><tbody><tr><td>10:00 ~ 11:00</td><td>雲台山軍情館</td><td>最容易親近的小百岳，開放時間：週一～週日 8:30~11:30,14:00~17:00</td></tr><tr><td>11:00 ~ 16:00</td><td>自由時段</td><td></td></tr><tr><td>16:00</td><td>南竿機場</td><td></td></tr><tr><td>17:30 ~ 18:20</td><td>返台飛機</td><td></td></tr></tbody></table><h2 id="4-x2F-2-初來乍到就吃到雷雷餐廳"><a href="#4-x2F-2-初來乍到就吃到雷雷餐廳" class="headerlink" title="4&#x2F;2 初來乍到就吃到雷雷餐廳"></a>4&#x2F;2 初來乍到就吃到雷雷餐廳</h2><p>一早由松山飛到南竿，飛馬祖的飛機是小飛機，會從待機室搭接駁車直接到飛機旁邊，落地南竿機場天氣很好，然後有人在候機的時候就開始在吃麵包。<br><img src="/ChrisComplete/img/matsu/matsu_064.jpeg"></p><p>搭接駁車去搭小飛機<br><img src="/ChrisComplete/img/matsu/matsu_065.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_066.jpeg"></p><p>到南竿機場了<br><img src="/ChrisComplete/img/matsu/matsu_001.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_067.jpeg"></p><p>第一站先去領租用的機車，我們事預定了機場借、機場還，出了機場老闆就已經幫忙準備好了。<br>接著就是先直奔民宿安頓行李，我們住的民宿在津沙村，風景很美。<br><img src="/ChrisComplete/img/matsu/matsu_068.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_069.jpeg"></p><p>到民宿將行李安頓好之後，本來打算在第一個景點”大漢據點”附近找東西吃，不過發現附近沒什麼店家，我們只好先跑到清水村去覓食，來馬祖就是要先來吃個淡菜阿！不過聽說目前還不是淡菜最肥的時候，要到5月中才有機會吃到真正肥大的淡菜。<br>除了淡菜我們還點了紅糟炒飯、麥蔥煎蛋，還有吃了一半才想到要拍照的涼拌海菜。<br><img src="/ChrisComplete/img/matsu/matsu_002.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_070.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_071.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_072.jpeg"></p><p>接著我們到大漢據點，馬祖有很多這樣的據點，雖然風景很好，但也不難想像當時住在這邊的阿兵哥們必須忍受這樣的生活條件，還有心理的壓力，想來也是辛苦。<br><img src="/ChrisComplete/img/matsu/matsu_003.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_073.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_004.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_009.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_005.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_006.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_007.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_008.jpeg"></p><p>離開大漢據點後，路上發現官帽山步道，覺得風景很好就決定走進去看看，原本以為會看到像標示那樣像帽子的碉堡，沒想到沒看到官帽但意外發現隱藏景點。<br>從這個階梯下去有個看起來荒廢的建築物。<br>一路走下去之後發現有個生鏽的砲台，這邊很靠近海岸，還有釣客在這裡垂釣，風景很好。<br><img src="/ChrisComplete/img/matsu/matsu_010.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_011.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_012.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_013.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_014.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_015.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_016.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_017.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_018.jpeg"></p><p>路上順路去吃阿珠𧋘餅跟雞肉串，𧋘餅有點類似蚵嗲，我個人是沒有到很喜歡，不過還蠻特別的。<br><img src="/ChrisComplete/img/matsu/matsu_019.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_020.jpeg"></p><p>在附近的路口有個鞦韆，下來拍拍照。<br><img src="/ChrisComplete/img/matsu/matsu_021.jpeg"></p><p>傍晚到鐵堡看日落。<br><img src="/ChrisComplete/img/matsu/matsu_022.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_023.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_024.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_025.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_026.jpeg"></p><p>晚上回到民宿附近覓食，我們住的津沙聚落其實就在海灘旁邊，附近的店家大多都隱身在巷弄裡，石造的房屋外牆配上吊在上方的燈，畫面很詩意。<br><img src="/ChrisComplete/img/matsu/matsu_027.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_028.jpeg"></p><p>隨便找了一間餐廳晚餐，馬祖的店都不大，許多店家如果不特別預約可能都沒有位置，尤其連假的熱門時段更是一位難求，沒想到晚餐竟然吃到堪稱我這輩子最雷的一餐。<br>一開始看到這間覺得裝潢不錯蠻有氣氛的，入座後點特別點了菜單上標註”推薦”的東坡肉套餐，隊友點了杏鮑菇套餐，明明店裡沒什麼人，不知道為什麼還是等了將近一個小時才上餐，除了份量很少之外，其他小菜也很普通，大多是些醃漬的菜。<br>主菜東坡肉很普通，但是要抱怨的是泡菜，隊友不是一個會挑食的人，不過他說他真的吞不下那個泡菜，我想說那我就幫他吃掉就好，結果發現同樣是泡菜，我拿到的跟隊友拿到的味道竟然不一樣，隊友的泡菜有一股酸臭味，感覺不是泡菜的酸，要不是我自己拿到的泡菜正常，還以為這個酸是馬祖的特色。<br>最後那碗紫菜湯真的完全不行，完全沒味道，跟白開水一樣，整個套餐吃下來完全不知道自己在吃什麼，而且以這個份量跟質量來說，一個套餐賣300多塊CP實在爆低，所以還是買了泡麵回民宿。下次用餐前還是要看一下google評論。<br><img src="/ChrisComplete/img/matsu/matsu_029.jpeg"></p><h2 id="4-x2F-3-追藍眼淚"><a href="#4-x2F-3-追藍眼淚" class="headerlink" title="4&#x2F;3 追藍眼淚"></a>4&#x2F;3 追藍眼淚</h2><p>第二天一早就先到馬港商店街吃早餐，本來照行程的話早餐應該是要去介壽獅子市場，不過就…起不來嘛你知道的。<br>超群繼光餅的馬祖漢堡(繼光餅夾肉夾蛋)很好吃，這幾天大概吃了3次吧。<br><img src="/ChrisComplete/img/matsu/matsu_074.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_075.jpeg"></p><p>接著在馬祖劍碑拍拍照，後來我們才發現劍碑的下方是一隻手。<br><img src="/ChrisComplete/img/matsu/matsu_076.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_077.jpeg"></p><p>然後參觀一下旁邊的天后宮，剛好有導遊在裡面進行導覽，聽聽有趣的故事。門口是一片沙灘，還可以看到遠方的媽祖巨神像。<br><img src="/ChrisComplete/img/matsu/matsu_078.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_079.jpeg"></p><p>路邊看到很有味道的古屋。<br><img src="/ChrisComplete/img/matsu/matsu_030.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_031.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_080.jpeg"></p><p>媽祖巨神像真的超大的，好難想像當時是如何建造的，從上面可以挑望南竿，如果天氣再好一點應該可以看得更遠。<br><img src="/ChrisComplete/img/matsu/matsu_032.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_033.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_081.jpeg"></p><p>祈福坑道就在巨神像的旁邊，還有Q版的媽祖跟可愛的石獅子，我們是相談甚歡啦。<br><img src="/ChrisComplete/img/matsu/matsu_084.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_082.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_083.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_034.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_035.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_086.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_087.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_088.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_089.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_090.jpeg"></p><p>沿路隨意閒晃，這邊應該是秋桂亭附近的一個景點，隨手拍拍。<br><img src="/ChrisComplete/img/matsu/matsu_036.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_091.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_092.jpeg"></p><p>中午回到馬港商店街吃午餐，點了花蛤、黃金餃、老酒麵線。<br><img src="/ChrisComplete/img/matsu/matsu_093.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_094.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_095.jpeg"></p><p>下午第一站，來到我們出發前就先預約的藍眼淚生態館，當時的規劃是因為晚上要去搖櫓船近距離看藍眼淚，所以下午先來生態館瞭解一下藍眼淚的生態，而且也不確定晚上能不能看到藍眼淚，索性就安排生態館當作藍眼淚保證班。<br>當天我們這個梯次只有我跟隊友兩個人，直到中間才有臨時加入的幾位遊客，整個導覽還算有趣，會先看個3D影片，內容是設計過的劇情，最後可以實際看到養殖的藍眼淚。<br><img src="/ChrisComplete/img/matsu/matsu_096.jpeg"></p><p>原訂行程其實接著是要去馬祖民俗文物館，不過我們就隨性的晃晃，決定先去參觀勝利堡。<br><img src="/ChrisComplete/img/matsu/matsu_098.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_097.jpeg"></p><p>從勝利堡外遠遠就可以看到枕戈待旦，我們索性就順便過去參觀了，也順便在枕戈待旦附設餐廳解決晚餐。<br>這邊餐廳主要應該都是接團體客，菜單以合菜較多，我們單點了紅糟炒飯、涼拌海菜以及燙小捲，價位偏高但是好吃，這邊的紅糟炒飯很推！<br>我們的座位窗外剛好面對海，一邊看風景一邊吃飯別有一番風味。<br><img src="/ChrisComplete/img/matsu/matsu_099.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_100.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_101.jpeg"></p><p>在晚上搖櫓前我們先返回民宿稍作休息，來到現在其實還沒有好好探索一下我們住的津沙聚落，剛好這個時間的光線很不錯，整個聚落拍起來有種九份的感覺。<br><img src="/ChrisComplete/img/matsu/matsu_037.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_038.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_039.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_040.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_103.jpeg"></p><p>晚上到北海坑道搖櫓船看藍眼淚，因為手機拍不起來就沒拍了，拍拍門口的裝置藝術。<br>搖櫓船很有趣，在暗暗的坑道裡拿一個撥片去撥水，受到刺激的藍眼淚就會發光，雖然不是爆棚但是畫面還是很夢幻。<br>而且搖櫓船的阿姨很厲害，整條暗暗的路他們不知道怎麼辨識方向的，一邊搖船還可以一邊跟我們分享藍眼淚爆棚的經驗。<br><img src="/ChrisComplete/img/matsu/matsu_104.jpeg"></p><h2 id="4-x2F-4-北竿一日快閃"><a href="#4-x2F-4-北竿一日快閃" class="headerlink" title="4&#x2F;4 北竿一日快閃"></a>4&#x2F;4 北竿一日快閃</h2><p>其實本來是預計明天才要去北竿的，不過因為怕隔天下雨，決定今天先衝北竿，萬一明天下雨我們還可以跑南竿的室內行程。<br>因為是臨時決定到北竿，早上才訂了船票，連假人很多我們訂到的是加班船。<br>到了北竿一下船就有機車出租在攬客，租了機車我們就往第一站螺蚌山前進，路上會經過塘后道沙灘，這個沙灘應該是我們在馬祖看到最美的沙灘。<br><img src="/ChrisComplete/img/matsu/matsu_124.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_125.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_126.jpeg"></p><p>螺蚌山其實是螺山與蚌山的合稱，螺蚌山步道不難走，不過中間有一小段路需要拉繩，沿路都可以欣賞壯闊的風景，真的是很值得到訪的景點。<br><img src="/ChrisComplete/img/matsu/matsu_041.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_105.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_042.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_043.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_044.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_045.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_106.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_046.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_107.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_108.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_109.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_110.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_111.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_112.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_113.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_114.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_115.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_116.jpeg"></p><p>中途會有幾個涼亭可以休息，有人一休息就開始吃餅乾。<br><img src="/ChrisComplete/img/matsu/matsu_117.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_118.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_119.jpeg"></p><p>終點是”海上孔子像”。<br><img src="/ChrisComplete/img/matsu/matsu_047.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_122.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_121.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_123.jpeg"></p><p>下一站來到了短坡山，雖然名字叫短坡，不過一開始就要先爬一段不短的坡，因為前面螺蚌山已經耗費太多體力，這邊我們走到這面牆之後就決定回頭了。<br><img src="/ChrisComplete/img/matsu/matsu_127.jpeg"></p><p>騎著機車一路往上可以到壁山觀景台，從上方俯看整個北竿，還可以看到完整的北竿機場。<br><img src="/ChrisComplete/img/matsu/matsu_128.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_129.jpeg"></p><p>播音站也是很有趣的景點，一整面喇叭牆雖然現在已經沒有喇叭，不過在旁邊有放置麥克風造型的裝置，對他講話真的有擴音功能。<br><img src="/ChrisComplete/img/matsu/matsu_050.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_130.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_131.jpeg"></p><p>芹壁村應該是我們在規劃北竿的行程的時候，第一個列入必去的景點，有種地中海風情的感覺。<br>深入村落裡面有一些廢棄的磚牆，與狹窄的階梯步道形成很有特色的畫面，可惜我們沒有住宿北竿，無緣看到夜晚芹壁村展露的另一種面貌。<br><img src="/ChrisComplete/img/matsu/matsu_132.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_133.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_053.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_054.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_055.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_056.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_058.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_134.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_137.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_138.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_140.jpeg"></p><p>在芹壁村點了特色黃金餃甜湯與黃金餅。<br><img src="/ChrisComplete/img/matsu/matsu_135.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_136.jpeg"></p><p>參觀坂里大宅的時候可以順便看看坂里沙灘，兩個景點都在北竿遊客中心旁邊。<br><img src="/ChrisComplete/img/matsu/matsu_059.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_141.jpeg"></p><p>北竿的最後一個景點是”龍貓隧道”，走下隧道是另一個據點，曬了整天的太陽有點曬傷，不過心情跟北竿的天氣一樣好。<br><img src="/ChrisComplete/img/matsu/matsu_060.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_146.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_142.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_061.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_143.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_144.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_062.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_063.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_145.jpeg"></p><p>回到南竿先直奔馬港商店街吃晚餐，大眾飲食店很推！吃到好吃的老酒麵線，還有忍不住又買了馬祖漢堡，好吃！<br><img src="/ChrisComplete/img/matsu/matsu_147.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_148.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_149.jpeg"></p><h2 id="4-x2F-5-雨天的八八坑道"><a href="#4-x2F-5-雨天的八八坑道" class="headerlink" title="4&#x2F;5 雨天的八八坑道"></a>4&#x2F;5 雨天的八八坑道</h2><p>好在昨天先去了北竿，今天果不其然下起了雨，其實我們本來就有預期可能會遇到下雨的天氣，畢竟清明時節雨紛紛嘛，所以我們也準備了雨衣，只是除了下雨之外，沒有預料到伴隨而來的大霧，整個馬祖瞬間沈浸在一片白茫茫的世界裡。<br>不過行程還是要跑，先去參觀了馬祖酒廠跟八八坑道。<br><img src="/ChrisComplete/img/matsu/matsu_150.jpeg"></p><p>然後晃到牛峰境，這是一個很顯眼的紅色廟，旁邊就是一個沙灘，好特別。<br><img src="/ChrisComplete/img/matsu/matsu_152.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_151.jpeg"></p><p>然後無意間發現旁邊就是有名的”蝦寮食堂”，聽說沒預約都吃不到，本來因為隊友吃素想說就沒有特別要去吃，沒想到被我們遇到了，肯定是有特別的安排吧！反正下雨也沒有特別想去的景點，看看時間還早就在門口等開門囉，最後運氣很好我們是當天第一組客人。<br>才一開門客人馬上湧入，除了訂位的還陸續有人在門口排隊真的不誇張。好吃好吃！<br><img src="/ChrisComplete/img/matsu/matsu_153.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_154.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_155.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_156.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_157.jpeg"></p><p>後來實在雨大霧大，稍微晃了一下北海坑道發現坑道也漲潮沒辦法步行參觀，就回民宿追劇了。</p><h2 id="4-x2F-6-4-x2F-8-滯留馬祖機場"><a href="#4-x2F-6-4-x2F-8-滯留馬祖機場" class="headerlink" title="4&#x2F;6~4&#x2F;8 滯留馬祖機場"></a>4&#x2F;6~4&#x2F;8 滯留馬祖機場</h2><p>本來的規劃是今天要返台，不過昨天的天氣狀況不太好，那時候就已經有心理準備了，早有聽說馬祖因為天氣(主要是大霧)導致班機停飛是很常見的，果然整天的班機都取消了。<br><img src="/ChrisComplete/img/matsu/matsu_158.jpeg"></p><p>果斷訂了民宿，跟公司多請一天假，繼續馬祖之旅延長篇。<br>馬祖許多民宿都有提供機場接駁服務，因為隔天還要回到機場排候補機票也沒辦法跑行程，不打算租機車，所以就聯絡了民宿的接駁服務。<br>一開始只是為了方便，刻意找離機場近的民宿，沒想到來到我們之前規劃要來吃早餐，但是起不來所以一直沒來過的介壽獅子市場附近，發現這裡才是馬祖最熱鬧的地方，竟然還有八方雲集！找了間餐廳吃了晚餐，結束今天。這裡真的很方便，下次有來馬祖建議住在這一區。<br><img src="/ChrisComplete/img/matsu/matsu_159.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_160.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_161.jpeg"></p><p>隔天一早直接走到旁邊的市場吃有名的阿妹的店鼎邊糊，本來以為跟基隆的鼎邊銼差不多，不過馬祖鼎邊糊吃起來感覺比較濃郁一點，裡面有魚肉塊很鮮！<br><img src="/ChrisComplete/img/matsu/matsu_163.jpeg"><br><img src="/ChrisComplete/img/matsu/matsu_162.jpeg"></p><p>用餐的時候聽隔壁大哥跟我們分享跳島到東莒西莒的景點，感覺很讚！可惜我們沒有規劃跳島。<br>在市場附近還另外買了一些小吃(肉包夾蛋很特別)就回到機場繼續排飛機了。<br>排了一整天追了不少劇，不過沒排到飛機，只好再訂一間民宿延長賽part2，一樣選在介壽獅子市場附近，隔天一樣退房之後就來機場繼續排。<br>其實被困在機場兩天，飛機不確定也沒辦法跑其他景點，真的是發出”馬祖玩的好膩喔”的抱怨，不過還是把握最後在馬祖的時間再吃一下馬祖漢堡。<br>最後終於在下午排到飛機，順利回台灣啦！<br>總結這次馬祖行程，其實時間足夠應該可以安排跳島玩，馬祖吃飯其實偏貴，風景是真的很好，因為疫情有點久沒有安排這種天數比較多的出遊行程，還是玩得很開心。其實真的不用大老遠出國，台灣有許多很有特色的離島很好玩，重點是能有一同旅行的伴，享受旅途的過程、享受人生。</p>]]></content>
    
    
    <categories>
      
      <category>遊記</category>
      
    </categories>
    
    
    <tags>
      
      <tag>馬祖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenBMC學習筆記</title>
    <link href="/ChrisComplete/2022/10/01/OpenBMC-Note/"/>
    <url>/ChrisComplete/2022/10/01/OpenBMC-Note/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司最近在推OpenBMC，這邊紀錄自己的學習筆記。<br>預計會有不少內容，索性獨立出來一個新的類別(OpenBMC)，這篇算是系列文的索引。</p><p>“閱讀筆記”系列文是參考OpenBMC官方<a href="https://www.youtube.com/channel/UC7uaW4PyzmougoMPgh7taOw">Youtube頻道</a>的學習筆記，<br>相關投影片可以由OpenBMC GitHub的<a href="https://github.com/openbmc/openbmc/wiki/Presentations#openbmc-learning-series2020">wiki頁面</a>取得。</p><p>“實作紀錄”會紀錄一些實作與分析的細節。</p><p>其他內容動態增加中。</p><h2 id="閱讀筆記"><a href="#閱讀筆記" class="headerlink" title="閱讀筆記"></a>閱讀筆記</h2><p><a href="/ChrisComplete/2022/09/24/OpenBMC-User-Management/">OpenBMC: User Management</a><br><a href="/ChrisComplete/2022/09/25/OpenBMC-Adding-A-New-Machine/">OpenBMC: Adding a New Machine</a></p><p>持續更新中…</p><h2 id="實作紀錄"><a href="#實作紀錄" class="headerlink" title="實作紀錄"></a>實作紀錄</h2><p>話說為了編譯OpenBMC還特地去買了4條RAM<br>查了一下聽說是至少要12G的記憶體</p><h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><p>Ubuntu 20.04</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt install git python3-distutils gcc g++ make file wget \<br>    gawk diffstat bzip2 cpio chrpath zstd lz4 bzip2<br></code></pre></td></tr></table></figure><p>下載專案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/openbmc/openbmc<br><span class="hljs-built_in">cd</span> openbmc<br></code></pre></td></tr></table></figure><p>指定硬體：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#.  setup可以列出支援硬體</span><br>. setup evb-ast2600<br></code></pre></td></tr></table></figure><p>執行setup時：<br>尋找所有machine目錄下的*.conf檔</p><p>配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim conf/local.conf <span class="hljs-comment"># . setup時產生</span><br><br>BB_NUMBER_THREADS=<span class="hljs-string">&#x27;8&#x27;</span><br>PARALLEL_MAKE=<span class="hljs-string">&#x27;-j 2&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">只更新<br>bitbake obmc-phosphor-image --runall=fetch<br></code></pre></td></tr></table></figure><p>編譯</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bitbake obmc-phosphor-image<br></code></pre></td></tr></table></figure><p>設定斷網環境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim conf/local.conf<br>BB_NO_NETWORK=<span class="hljs-string">&#x27;1&#x27;</span><br></code></pre></td></tr></table></figure><p>產生的image:&#x2F;work&#x2F;openbmc&#x2F;build&#x2F;tmp&#x2F;deploy&#x2F;images&#x2F;romulus&#x2F;</p><p>安裝QEMU<br>離開QEMU:ctrl A ctrl X</p><p>更新中…</p>]]></content>
    
    
    <categories>
      
      <category>程式設計</category>
      
      <category>OpenBMC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenBMC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenBMC: Adding a New Machine</title>
    <link href="/ChrisComplete/2022/09/25/OpenBMC-Adding-A-New-Machine/"/>
    <url>/ChrisComplete/2022/09/25/OpenBMC-Adding-A-New-Machine/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此系列文是參考OpenBMC官方<a href="https://www.youtube.com/channel/UC7uaW4PyzmougoMPgh7taOw">Youtube頻道</a>的學習筆記，<br>相關投影片可以由OpenBMC GitHub的<a href="https://github.com/openbmc/openbmc/wiki/Presentations#openbmc-learning-series2020">wiki頁面</a>取得。</p><h2 id="基礎知識"><a href="#基礎知識" class="headerlink" title="基礎知識"></a>基礎知識</h2><p>這邊假設讀者已經具備下面列出的一些基礎知識：</p><ol><li>BMC硬體：要執行BMC的硬體環境。</li><li>Linux Kernel</li><li>嵌入式Linux開發 (C&#x2F;C++程式語言)</li><li>IPMI</li><li>D-Bus</li><li>Yocoto</li></ol><h2 id="Machine-Layers"><a href="#Machine-Layers" class="headerlink" title="Machine Layers"></a>Machine Layers</h2><p>要建立新的機器，或者理解為開始一個新專案，需要先以組織為名稱建立專案庫(repository&#x2F;repo)。<br>例如組織名稱”abc”即建立名稱為：meta-abc的repo。<br>可以提出要求將這個repo加入OpenBMC的mail列表(Mailing List)中，與其他開發者共享。</p><p>接著可以在這個repo中自行加入機器(Machine Layer)，例如：meta-xyz代表加入名為xyz的機器。<br>所有與機器有關的配置(Configuration)與Recipe(可以理解為平台上要使用的功能或Package)都放在個別機器的目錄下。</p><p>根據機器需要，各別加入packagegroup，而每個機器可以針對不同的Recipe有自己特定的配置。</p><p>下圖是一個範例：<br><img src="/ChrisComplete/img/openbmc-machine-layer.png"></p><p>範例中在meta-xyz(Machine Layer)中的conf目錄下定義了機器的配置，其中bblayers.conf.sample定義了一些外部的Recipe路徑(Discovery Path)。</p><p>具體的配置檔在macine&#x2F;xyz.conf目錄下，可以在這個檔案中進行機器相關的系統配置(例如baud rate等)。</p><p>接下來是一系列的Recipes Changes，每個應用功能都對應的一個Recipe，而在Recipes目錄下可以根據系統需求增加功能或覆蓋原先的設定。</p><p>舉例來說，如果想要修改Linux Kernel可以在”recipes-kernel”中加入”bbappend”檔案，然後在”xyz.cfg”中自行加入需要的配置。</p><h2 id="Kernel-Changes"><a href="#Kernel-Changes" class="headerlink" title="Kernel Changes"></a>Kernel Changes</h2><p>因為每個平台(Platform)在硬體配置上可能有不同的設計，也可能需要使用不同的驅動程式(Driver)，因此需要針對Linux Kernel的部分進行配置。<br>基本的像是裝置樹(Device Tree)，需要在目錄：arch&#x2F;arm&#x2F;boot&#x2F;dts進行修改，其名稱必需要是”aspeed-bmc-abc-xyz.dts”。<br>其他也可以根據需要新增自己的驅動程式。</p><p>此外也可能因應Linux Kernel的升級(更新)，需要同步更新專案的Kernel。<br>OpenBMC使用Kernel的分歧為：linux-aspeed。<br>如果需要Patch修改到Linux Kernel官方(kernel.org)，要加入openBMC的Mailing List。</p><h2 id="基礎功能"><a href="#基礎功能" class="headerlink" title="基礎功能"></a>基礎功能</h2><h3 id="Host-Power-Control"><a href="#Host-Power-Control" class="headerlink" title="Host Power Control"></a>Host Power Control</h3><p>有兩個package負責控制與監控電源狀態。</p><ol><li><p>Phosphor-state-manage<br>每一個操作(on&#x2F;off&#x2F;reset)需要有單獨的systemd，例如：obmc-chassis-poweroff@.target、obmc-chassis-poweron@.target等。</p></li><li><p>x86-power-control<br>主要針對Intel平台的電源控制，支援標準的操作(on&#x2F;off&#x2F;reset)，也支援Redfish。<br>他是利用libgpiod來實作，意思是需要在Kernel(Device Tree)中加入對應的GPIO設定，如果使用的名稱與標準的不一樣，可以透過配置檔將名稱傳入。<br>預設使用的名稱為：POWER_OUT、RESET_OUT等。<br>支援多個host，並且可以有個別的配置檔。</p></li></ol><p>使用VIRTUAL-RUNTIME_obmc-host-state-manager來選擇要使用的package。</p><h3 id="SoL-Serial-over-Lan"><a href="#SoL-Serial-over-Lan" class="headerlink" title="SoL (Serial over Lan)"></a>SoL (Serial over Lan)</h3><p>SoL提供遠端管理者可以用來看到主系統(Host System)上的終端機(Console)。<br>要啟用SoL可以將套件obmc-console加入專案。</p><p>server.xx.conf可以用來進行配置要使用的UART Port，在Aspeed Chip上預設使用VUART Port。</p><p>系統起來的時候會帶起一個obmc-console-server daemon，接下來就可以使用客戶端(obmc-console.client)去存取這個service。</p><p>OpenBMC SoL也支援多個host在不同的UART Port上，不過要先設定enable-concurrent-servers這個flag，然後每個host需要加入自己各自的配置檔。</p><h3 id="FRU"><a href="#FRU" class="headerlink" title="FRU"></a>FRU</h3><p>FRU其實就是一個Flash Memory，用來保存這個板子的資訊，包含Product Name、Part Number、Serial Number等。<br>並依照規範(IPMI)的格式來儲存這些資訊。</p><p>有兩個package與這個功能有關：</p><ol><li><p>ipmi-fru-parser(phosphor-ipmi-fru)<br>這個package是用來修改讀取FRU的EEPROM路徑。</p></li><li><p>Entity Manager<br>這個package透過配置檔將一個FRU定義為一個一個fru-device的Entity，因此叫做Entity Manager。</p></li></ol><p>他會將所有可讀取的EEPROM列出來，並且提供讀取操作，支援8bit與16bit的device，所有FRU device有提供D-Bus介面可以存取。</p><p>問答有提到，Entity Manager有支援動態增加，不過需要先在Device Tree做好預先配置。</p><h3 id="Sensors"><a href="#Sensors" class="headerlink" title="Sensors"></a>Sensors</h3><p>此部分影片漏講，剛好投影片被跳過，因此下面的內容單純從投影片整理。</p><p>兩個與Sensor相關的package</p><ol><li><p>phosphor-hwmon<br>透過sensor配置檔指定每個sensor讀取的方式。</p></li><li><p>dbus-sensors<br>有不同的daemon來提供不同類型的sensor，例如：hwmon、fan、cpu、ipmb、與psu等。</p></li></ol><p>透過D-Bus讀取配置檔，在執行期間(Runtime)時根據每個種類來偵測Sensor。</p><p>監控Sensor後會根據配置檔設定的threshold來判斷是否超標，所有Sensor需要在Entity Manager的配置檔中進行配置。</p><h3 id="Fan-Control"><a href="#Fan-Control" class="headerlink" title="Fan Control"></a>Fan Control</h3><p>系統也會需要根據溫度Sensor的讀值來控制風扇轉速。</p><p>phosphor-fan-presence與phosphor-pid-control兩個package可以用來進行與風扇相關的配置，設定virtual-obmc-fan-mgmt來指定要使用的package。</p><p>phosphor-pid-control有兩種配置方法</p><ol><li><p>透過Json檔<br>以Json檔各別設定每個sensor與風扇轉速之間的控制關係。</p></li><li><p>透過Entity Manager<br>需要設定enable-configure-dbus來指定使用Entity Manager，再自行加入風扇控制的設定檔。</p></li></ol><h3 id="IPMI-In-Band"><a href="#IPMI-In-Band" class="headerlink" title="IPMI (In Band)"></a>IPMI (In Band)</h3><p>IPMI是很基礎的功能，主要用來與BMC進行溝通。</p><p>主要的package是phosphor-host-ipmid，可以設定obmc-host-ipmi-hw為phosphor-ipmi-kcs或phosphor-ipmi-bt來<br>指定使用KCS或BT介面來與host溝通。</p><p>使用時需要對每個機器指定一個ID：recpise-phosphor&#x2F;ipmi&#x2F;phosphor-ipmi-config&#x2F;dev_id.json</p><p>支援標準IPMI指令，如果需要增加自己的OEM指令，可以透過增加&#x2F;修改ipmi-providers library，也可以覆寫(Override)標準的指令。<br>如果需要增加自己的OEM Library需要建立自己的repo。</p><p>這邊有幾個OEM Specific IPMI repo的例子：intel-ipmi-oem、fb-ipmi-oem</p><h3 id="IPMB"><a href="#IPMB" class="headerlink" title="IPMB"></a>IPMB</h3><p>另一個常見的介面是IPMB，可以加入phosphor-ipmi-ipmb來啟用。<br>支援”ipmb”與”ME”兩個通道(Channel)。</p><p>支援多個裝置共用ipmb&#x2F;ME通道。</p><p>需要在Device Tree中為每個裝置加入ipmb-dev kernel driver，並為每個裝置加入設定檔：recipes-phosphor&#x2F;ipmi&#x2F;phosphor-ipmi-ipmb&#x2F;ipmb-channels.json</p><h3 id="FW-Upgrade"><a href="#FW-Upgrade" class="headerlink" title="FW Upgrade"></a>FW Upgrade</h3><p>根據不同支援的裝置啟用不同的package來啟用FW更新，例如：</p><ol><li>phosphor-psu-software-manager：PSU</li><li>phosphor-software-manager：BMC&#x2F;Host BIOS</li></ol><p>建構(Build)完的印象檔(image)位置在：$(build)&#x2F;tmp&#x2F;deploy&#x2F;image&#x2F;$machine&#x2F;*.mtd.tar<br>BIOS則需要透過工具(genBiosTar)進行轉換，預設轉換後的檔案名稱為：obmc-bios-tar.gz</p><p>不同的平台可能有不同的更新流程，例如要先操作GPIO或考慮如何分配Flash空間，這些可以透過obmc-flash-host-bios@.service檔案來設定執行對應的指令。</p><p>更新流程大至如下：</p><ol><li>透過scp指令將印象檔放到BMC上(&#x2F;tmp&#x2F;images)。</li><li>之後系統會產生一個image ID(&#x2F;tmp&#x2F;images&#x2F;xxxx)。</li><li>接下來執行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">busctl set-property xyz.openbmc_project.Software.BMC.pdater /xyz/openbmc_project/software/XXXX<br>xyz.openbmc_project.Software.Activation RequestedActivation s<br>xyz.openbmc_porject.Software.Activation.RequestedActivations.Active<br></code></pre></td></tr></table></figure></li><li>若是更新BMC，最後需要進行重啟讓設定生效。</li></ol><p>也可以透過Redfish指令進行更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -k -H <span class="hljs-string">&quot;X-Auth-Token: <span class="hljs-variable">$token</span>&quot;</span> -H <span class="hljs-string">&quot;Content-Type: application/octet-stream&quot;</span> -X POST -T &lt;image&gt; https://<span class="hljs-variable">$&#123;bmc&#125;</span>/redfish/v1/UpdateService<br></code></pre></td></tr></table></figure><h3 id="Other-Features"><a href="#Other-Features" class="headerlink" title="Other Features"></a>Other Features</h3><p>還有其他功能例如：</p><ol><li>Entity Manager</li><li>Redfish</li><li>IPMI(Out of Band)</li><li>BMCWeb</li><li>WebUI</li><li>Network-manager</li><li>GPIO Monitor</li><li>SEL log</li><li>Host console log</li><li>NVME</li><li>Post code management</li></ol><h2 id="Continuous-Integration"><a href="#Continuous-Integration" class="headerlink" title="Continuous Integration"></a>Continuous Integration</h2><p>利用CI可以早期將可能導致系統壞掉的commit發現並修正。<br>參考：<a href="https://github.com/openbmc/openbmc/wiki/Continuous-Integration">https://github.com/openbmc/openbmc/wiki/Continuous-Integration</a></p><p>OpenBMC的<a href="https://github.com/openbmc/openbmc-build-script/blob/master/build-setup.sh">建構腳本(Build Script)</a></p>]]></content>
    
    
    <categories>
      
      <category>程式設計</category>
      
      <category>OpenBMC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenBMC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenBMC: User Management</title>
    <link href="/ChrisComplete/2022/09/24/OpenBMC-User-Management/"/>
    <url>/ChrisComplete/2022/09/24/OpenBMC-User-Management/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此系列文是參考OpenBMC官方<a href="https://www.youtube.com/channel/UC7uaW4PyzmougoMPgh7taOw">Youtube頻道</a>的學習筆記，<br>相關投影片可以由OpenBMC GitHub的<a href="https://github.com/openbmc/openbmc/wiki/Presentations#openbmc-learning-series2020">wiki頁面</a>取得。</p><h2 id="具備知識"><a href="#具備知識" class="headerlink" title="具備知識"></a>具備知識</h2><p>這邊假設聽眾具備基礎的BMC(包含IPMI、Redfish等)知識。<br>其中D-Bus在OpenBMC是重要的IPC溝通方式，也需要有點基本認識。</p><h2 id="User-Management設計概念"><a href="#User-Management設計概念" class="headerlink" title="User Management設計概念"></a>User Management設計概念</h2><p>OpenBMC希望設計一個通用的使用者管理，而非以往大多以IPMI為中心的”Interface Specific”作法，即：任何服務(WebUI、Redfish等)都與IPMI共用使用者。</p><p>為了達到此目的，OpenBMC將User Management獨立為單一的daemon，並建立通用的D-Bus API提供操作，<br>且只有一個API可以去取得local或remote的使用者資訊。</p><p>另外，考量易用性與安全性，OpenBMC使用PAM modules而非單純的D-Bus API來進行驗證(登入)與修改密碼的操作。</p><p>OpenBMC也支援RMCP+登入。</p><p>總之，在設計概念上，基本的username、group以及privileges都是由這個通用的使用者管理來進行維護，<br>其餘的設定則交由各個應用程式自行維護。</p><h2 id="預設的Groups與Privilege-Roles"><a href="#預設的Groups與Privilege-Roles" class="headerlink" title="預設的Groups與Privilege Roles"></a>預設的Groups與Privilege Roles</h2><p>這邊有幾個預設的groups：ssh、ipmi、redfish、web。<br>若要讓使用者使用這些功能就必須將user加入這些群組。</p><p>此外還有一些預設的privilege roles：<br><img src="/ChrisComplete/img/openbmc-privilege.png"></p><h2 id="架構概念圖"><a href="#架構概念圖" class="headerlink" title="架構概念圖"></a>架構概念圖</h2><p><img src="/ChrisComplete/img/openbmc-architecture.png"></p><p>主要使用者管理由Common User Manager(Phosphor-user-manager)負責，其他應用程式(如：Web Service &#x2F; Redfish、IPMI等)則透過D-Bus的API呼叫來取得或建立使用者。</p><p>應用程式可以透過監控D-Bus上的”interfacesAdded”、”interfacesRemoved”、與”PropertiesChanged”這幾個signal來cache使用者資訊。</p><h2 id="主要元件"><a href="#主要元件" class="headerlink" title="主要元件"></a>主要元件</h2><p>整個User Management包含兩個主要的元件：</p><h3 id="1-Phosphor-user-manager"><a href="#1-Phosphor-user-manager" class="headerlink" title="1. Phosphor-user-manager"></a>1. Phosphor-user-manager</h3><p>Unix風格的使用者管理器，所謂Unix風格就是利用OS提供的操作(例如：adduser、deluser等)進行使用者管理，其使用者資訊的設定檔會被儲存於目錄&#x2F;etc&#x2F;password與&#x2F;etc&#x2F;shadow中。</p><p>支援LDAP的配置以及privilege映射。</p><p>相關的D-Bus interface定義在位置：&#x2F;xyz&#x2F;openbmc_project&#x2F;user</p><p>(註：問答有提到目前的D-Bus API實作不穩定，所以如果要透過API實作自己的management則需自行承擔風險)</p><p>這邊簡單介紹phosphor-user-manage的interface：<br><img src="/ChrisComplete/img/openbmc-phosphor-interface.png"><br>預設配置：no lockout, minlenght(8), no timeout, rememberOldPassword(0)</p><h3 id="2-Stacked-PAM"><a href="#2-Stacked-PAM" class="headerlink" title="2. Stacked PAM"></a>2. Stacked PAM</h3><p>主要用來管理使用者密碼，使用者的登入(驗證)與密碼修改的操作都會透過Stacked PAM進行。<br>其中，remote(LDAP) user會呼叫pam_autoenticate()與pam_chauthtok()兩個API來進行驗證與修改密碼的操作。</p><p>密碼使用one-way hash(SHA512)，不過由於IPMI使用設定不同，因此在IPMI group中的使用者密碼會另外加密保存(Cipher:AES-128-CBC, Digest-SHA256 whth HMAC)。</p><p>在Stacked PAM中有三個主要的modules：</p><ol><li><p>pam_tally2.so<br>主要用來handle登入失敗的狀況。</p></li><li><p>pam_unix.so<br>主要用來進行local user的驗證。</p></li><li><p>nss_pam_ldap.so<br>如果loacal的驗證失敗，則會嘗試LDAP的登入，<br>此module就是用來處理remote的驗證。</p></li></ol><p>問：有沒有API提供設定優先使用LDAP驗證，省去local驗證的時間？<br>答：的確如果有相同使用者名稱分別在LDAP與local的狀況下會有這個需求，<br>不過目前沒有API可以設定，但可以透過configuration設定。</p><p>在更新密碼的操作則會包含下列流程：</p><ol><li>使用pam_chauthtok()來設定或修改密碼。</li><li>pam_cracklib會檢查密碼長度是否符合要求。</li><li>pam_pwhistory檢查密碼歷史紀錄是否符合。</li><li>pam_unit會計算加密(SHA)的密碼。</li><li>如果user屬於ipmi group，此時會在pam_ipmisave處理；<br>若原先不屬於ipmi group，經過設定之後增加進入ipmi group時也會在這邊進行處理。</li></ol><h3 id="設定檔"><a href="#設定檔" class="headerlink" title="設定檔"></a>設定檔</h3><p>Authentication PAM Configuration: &#x2F;etc&#x2F;pam.d&#x2F;common-auth<br>這個檔案可以改變auth的順序</p><p>Password Update PAM Configuration: &#x2F;etc&#x2F;pam.d&#x2F;common-password</p><h2 id="驗證流程"><a href="#驗證流程" class="headerlink" title="驗證流程"></a>驗證流程</h2><p>整個流程如下圖所示(不包含IPMI)<br><img src="/ChrisComplete/img/openbmc-authorization-flow.png"></p><h2 id="支援的方法"><a href="#支援的方法" class="headerlink" title="支援的方法"></a>支援的方法</h2><p>整理驗證與介面之間的支援度，參考下表：<br><img src="/ChrisComplete/img/openbmc-methods.png"></p><h2 id="其他補充"><a href="#其他補充" class="headerlink" title="其他補充"></a>其他補充</h2><p>在local.conf.sample設定檔中可以設定預設密碼</p>]]></content>
    
    
    <categories>
      
      <category>程式設計</category>
      
      <category>OpenBMC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenBMC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript奇技淫巧</title>
    <link href="/ChrisComplete/2022/08/14/Javascript-Trick/"/>
    <url>/ChrisComplete/2022/08/14/Javascript-Trick/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript一直是我滿喜歡的程式語言，原因可能是因為他的執行環境很方便(只要打開瀏覽器就可以使用)，不過更多的可能是一種”情結”，畢竟我第一個接觸的程式語言就是JavaScript。<br>對於JavaScript的評價有褒有貶，有些人推崇它的彈性，有些人深陷它奇怪的行為。<br>這邊先不評論太多，只是整理一些有趣的小技巧。</p><h2 id="Trick-1-判斷變數類型是否為Primitive"><a href="#Trick-1-判斷變數類型是否為Primitive" class="headerlink" title="Trick 1: 判斷變數類型是否為Primitive"></a>Trick 1: 判斷變數類型是否為Primitive</h2><p>Object建構式可以用來包裝(wrapper)變數，例如將“number”包裝成“number物件”，而已經是object的變數則Object建構式會回傳值。<br>因此透過判斷Object回傳的內容是否等於變數值，可以用來判斷是否為物件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> v1 = <span class="hljs-number">1</span>; <span class="hljs-comment">// primitive</span><br><span class="hljs-keyword">let</span> v2 = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]; <span class="hljs-comment">// array object, non-primitive</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPrimitive</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>(val) !== val;<br>&#125;<br><br><span class="hljs-title function_">isPrimitive</span>(v1); <span class="hljs-comment">// true</span><br><span class="hljs-title function_">isPrimitive</span>(v2); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="Trick-2-建立純物件-Pure-Object"><a href="#Trick-2-建立純物件-Pure-Object" class="headerlink" title="Trick 2: 建立純物件(Pure Object)"></a>Trick 2: 建立純物件(Pure Object)</h2><p>純物件(Pure Object)代表物件不包含任何function(預設的也沒有)。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;; <span class="hljs-comment">// 一般方法建立的空物件會包含繼承來的function，參考下圖。</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// pure object</span><br></code></pre></td></tr></table></figure><p><img src="/ChrisComplete/img/createObject.png"></p><h2 id="Trick-3-移除陣列內重複的元素"><a href="#Trick-3-移除陣列內重複的元素" class="headerlink" title="Trick 3: 移除陣列內重複的元素"></a>Trick 3: 移除陣列內重複的元素</h2><p>利用Set物件只能保存唯一值的特性，可以用來將陣列內重複的元素移除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> newArr = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)]; <span class="hljs-comment">// 1, 2, 3, 4, 5</span><br></code></pre></td></tr></table></figure><h2 id="Trick-4-Declaration與Expression"><a href="#Trick-4-Declaration與Expression" class="headerlink" title="Trick 4: Declaration與Expression"></a>Trick 4: Declaration與Expression</h2><p>針對何時應該使用Function Declaration與Function Expression進行比較。<br>首先是考慮提昇(Hoisting)，Function Declaration會被hoist，而Function Expression則否。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 先呼叫fun1才宣告的作法，由於fun1會被host，所以可以work</span><br><span class="hljs-title function_">fun1</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// do some thing</span><br>&#125;<br><br><span class="hljs-comment">// 若使用expression的方式則沒有hosting，會fail</span><br><span class="hljs-title function_">fun2</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">fun2</span> = (<span class="hljs-params"></span>)=&gt;&#123;<br>    <span class="hljs-comment">// do some thing</span><br>&#125;<br></code></pre></td></tr></table></figure><p>因此如果是全域功能的function，可以使用function declaration，否則可以使用function expression以避免污染全域變數。<br>另外也可以進一步使用IIFE(Immediately Invoked Function Expressions)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">array.<span class="hljs-title function_">map</span>( <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// do some thing</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="Trick-5-走訪物件"><a href="#Trick-5-走訪物件" class="headerlink" title="Trick 5: 走訪物件"></a>Trick 5: 走訪物件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// for...in, 走訪key</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> property <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">const</span> value = obj[property];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(property, value);<br>&#125;<br><br><span class="hljs-comment">// for...of, 走訪value(物件需iterable)</span><br><span class="hljs-keyword">const</span> allProperties = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj); <span class="hljs-comment">// 透過Object.keys取得物件屬性</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> property <span class="hljs-keyword">of</span> allProperties) &#123;<br>  <span class="hljs-keyword">const</span> value = obj[property];<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(property, value);<br>&#125;<br><br><span class="hljs-comment">//使用 Object.entries()</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Trick-6-深拷貝-Deep-Copy"><a href="#Trick-6-深拷貝-Deep-Copy" class="headerlink" title="Trick 6: 深拷貝(Deep Copy)"></a>Trick 6: 深拷貝(Deep Copy)</h2><p>一般的做物件複製的時候，如果只是單純assign的話，只能複製到第一層的內容，而物件內包含的物件概念比較像是複製了”指標”，如此一來當物件內的物件內容被改動時，原本複製的內容也會被改動。<br>例如：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;value&#x27;</span>,<br>  <span class="hljs-attr">nestedObj</span>: &#123;<br>    <span class="hljs-attr">key2</span>: <span class="hljs-string">&#x27;value2&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> obj2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj1); <span class="hljs-comment">// Object.assign</span><br><span class="hljs-comment">// 使用展開運算子(spread)效果相同</span><br><span class="hljs-comment">// const obj2 = &#123;</span><br><span class="hljs-comment">//   ...obj1     </span><br><span class="hljs-comment">// &#125;</span><br><br>obj1.<span class="hljs-property">nestedObj</span>.<span class="hljs-property">key2</span> = <span class="hljs-string">&#x27;newValue&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2); <span class="hljs-comment">// obj2.nestedObj.key2連帶被改為&#x27;newValue&#x27;</span><br></code></pre></td></tr></table></figure></p><p>此時可以利用JSON stringify&#x2F;paser做深拷貝：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br></code></pre></td></tr></table></figure><h2 id="Trick-7-型別轉換"><a href="#Trick-7-型別轉換" class="headerlink" title="Trick 7: 型別轉換"></a>Trick 7: 型別轉換</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Convert to string</span><br><span class="hljs-keyword">let</span> var1 = <span class="hljs-number">99</span> + <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-comment">// Convert to bool</span><br><span class="hljs-keyword">let</span> var2 = !!<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Trick-8-字串反轉"><a href="#Trick-8-字串反轉" class="headerlink" title="Trick 8: 字串反轉"></a>Trick 8: 字串反轉</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;ABCDEFG&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reverse</span> = string =&gt; string.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">reverse</span>(str)); <span class="hljs-comment">// GFEDCBA</span><br></code></pre></td></tr></table></figure><h2 id="Trick-9-快速Console-Log"><a href="#Trick-9-快速Console-Log" class="headerlink" title="Trick 9: 快速Console Log"></a>Trick 9: 快速Console Log</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">c = <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">document</span>);<br><span class="hljs-title function_">c</span>(<span class="hljs-string">&quot;message&quot;</span>) <span class="hljs-comment">// message</span><br></code></pre></td></tr></table></figure><h2 id="Trick-10-檢查DOM-Element是否可見"><a href="#Trick-10-檢查DOM-Element是否可見" class="headerlink" title="Trick 10: 檢查DOM Element是否可見"></a>Trick 10: 檢查DOM Element是否可見</h2><p>可以用來檢查DOM element是否進入畫面  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">callback</span> = (<span class="hljs-params">entries</span>) =&gt; &#123;<br>    entries.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">entry</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (entry.<span class="hljs-property">isIntersecting</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($&#123;entry.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>&#125;);<br>        &#125;<br>    &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> options = &#123;<br>    <span class="hljs-attr">threshold</span>: <span class="hljs-number">1.0</span>, <span class="hljs-comment">// 可見比例</span><br>&#125;;<br>  <br><span class="hljs-keyword">const</span> observer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntersectionObserver</span>(callback, options);<br><span class="hljs-keyword">const</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;element&#x27;</span>);<br>observer.<span class="hljs-title function_">observe</span>(element);<br></code></pre></td></tr></table></figure><h2 id="Trick-11-展開Array"><a href="#Trick-11-展開Array" class="headerlink" title="Trick 11: 展開Array"></a>Trick 11: 展開Array</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">flat</span> = (<span class="hljs-params">array</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, it</span>) =&gt;</span> acc.<span class="hljs-title function_">concat</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(it) ? <span class="hljs-title function_">flat</span>(it) : it), []);<br>&#125;;<br><br><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, [<span class="hljs-number">4</span>, [<span class="hljs-number">5</span>]]]]];<br><span class="hljs-keyword">const</span> flatArray = <span class="hljs-title function_">flat</span>(array); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h2 id="Trick-12-測試經過時間"><a href="#Trick-12-測試經過時間" class="headerlink" title="Trick 12: 測試經過時間"></a>Trick 12: 測試經過時間</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>()<br><span class="hljs-comment">// do something</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>()<br></code></pre></td></tr></table></figure><h2 id="Trick-13-For-Loop效能優化"><a href="#Trick-13-For-Loop效能優化" class="headerlink" title="Trick 13: For Loop效能優化"></a>Trick 13: For Loop效能優化</h2><p>透過將length變數初始化，可以避免每次loop都需要get一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, length = arr.<span class="hljs-property">length</span>; i &lt; length; i++)&#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Trick-14-String轉Number"><a href="#Trick-14-String轉Number" class="headerlink" title="Trick 14: String轉Number"></a>Trick 14: String轉Number</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> int = <span class="hljs-string">&quot;9&quot;</span>;<br>int = +int;<br><span class="hljs-comment">// or int = ~~int</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> int); <span class="hljs-comment">//Result: &quot;number&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Trick-15-取得浮點數的整數部分"><a href="#Trick-15-取得浮點數的整數部分" class="headerlink" title="Trick 15: 取得浮點數的整數部分"></a>Trick 15: 取得浮點數的整數部分</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> float = <span class="hljs-number">12.3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(float_var | <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">let</span> neg_float = -<span class="hljs-number">45.6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(neg_float_var | <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="Trick-16-用-Nullish-Coalescing-運算子取代-運算子"><a href="#Trick-16-用-Nullish-Coalescing-運算子取代-運算子" class="headerlink" title="Trick 16: 用??(Nullish Coalescing)運算子取代||運算子"></a>Trick 16: 用??(Nullish Coalescing)運算子取代||運算子</h2><p>使用??運算子設定預設值是常見的做法，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> parameter = &#123;<br>    var1 = <span class="hljs-string">&#x27;v1&#x27;</span>,<br>&#125;<br><br><span class="hljs-keyword">let</span> var1 = parameter.<span class="hljs-property">var1</span> || <span class="hljs-string">&#x27;default&#x27;</span>; <span class="hljs-comment">// v1</span><br><span class="hljs-keyword">let</span> var2 = parameter.<span class="hljs-property">var2</span> || <span class="hljs-string">&#x27;default&#x27;</span>; <span class="hljs-comment">// default</span><br></code></pre></td></tr></table></figure><p>不過如果設定的值是0或fals時，可能會造成誤判。<br>此時可以使用更嚴謹的??運算子，他只會判斷undifined與null的狀況。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> parameter = &#123;<br>    var1 = <span class="hljs-literal">false</span>,<br>&#125;<br><span class="hljs-keyword">let</span> var1 = parameter.<span class="hljs-property">var1</span> ?? <span class="hljs-string">&#x27;default&#x27;</span>; <span class="hljs-comment">// false</span><br><span class="hljs-keyword">let</span> var2 = parameter.<span class="hljs-property">var2</span> || <span class="hljs-string">&#x27;default&#x27;</span>; <span class="hljs-comment">// default</span><br></code></pre></td></tr></table></figure><h2 id="Trick-17-用-Optoinal-Chaining-運算子"><a href="#Trick-17-用-Optoinal-Chaining-運算子" class="headerlink" title="Trick 17: 用?.(Optoinal Chaining)運算子"></a>Trick 17: 用?.(Optoinal Chaining)運算子</h2><p>用?.運算子可以簡化用&amp;&amp;判斷null或undefined的情況。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// case 1</span><br><span class="hljs-keyword">let</span> var1 = parameter.<span class="hljs-property">property</span> &amp;&amp; parameter.<span class="hljs-property">property</span>.<span class="hljs-property">value</span>;<br><span class="hljs-keyword">let</span> var1 = parameter.<span class="hljs-property">property</span>?.<span class="hljs-property">value</span><br><br><span class="hljs-comment">// case 2</span><br><span class="hljs-keyword">let</span> input = form.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input[name=userInput]&#x27;</span>)<br><span class="hljs-keyword">let</span> inputValue = input ? input.<span class="hljs-property">value</span> : <span class="hljs-literal">undefined</span><br><br><span class="hljs-keyword">let</span> input = form.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input[name=userInput]&#x27;</span>)?.<span class="hljs-property">value</span><br></code></pre></td></tr></table></figure><h2 id="Trick-18-動態import"><a href="#Trick-18-動態import" class="headerlink" title="Trick 18: 動態import"></a>Trick 18: 動態import</h2><p>一般常使用import進行module的載入，不過這種靜態的載入方式有一些限制，<br>例如必須在script tag上宣告type為module，且不夠彈性。<br>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>JavaScript：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> submodule <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./submodule.js&#x27;</span>;<br></code></pre></td></tr></table></figure><p>此時可以採用動態的import：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Form 1</span><br><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./submodule.js&#x27;</span>)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// Do something</span><br>    &#125;);<br> <br><span class="hljs-comment">// Form 2</span><br>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable language_">module</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./submodule.js&#x27;</span>);<br>        <span class="hljs-comment">// Do something</span><br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="Trick-19-取得最後一個元素"><a href="#Trick-19-取得最後一個元素" class="headerlink" title="Trick 19: 取得最後一個元素"></a>Trick 19: 取得最後一個元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr[arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>]<br><span class="hljs-comment">// or </span><br>arr.<span class="hljs-title function_">at</span>(-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="Trick-20-設定private變數"><a href="#Trick-20-設定private變數" class="headerlink" title="Trick 20: 設定private變數"></a>Trick 20: 設定private變數</h2><p>在class內宣告#開頭的變數可以將其設為private，此變數不會被繼承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassWithPrivateField</span> &#123;<br>    #privateField;<br>    #<span class="hljs-title function_">privateMethod</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.#privateField = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>程式設計</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Submodule的使用</title>
    <link href="/ChrisComplete/2022/07/02/Git-Submodule-Update/"/>
    <url>/ChrisComplete/2022/07/02/Git-Submodule-Update/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在公司的專案使用Git進行管理，不過因為還使用了其他submodule，有時候在版本或branch之間切換後，沒有同步更新submodule就可能導致build fail，這邊紀錄一下相關指令與使用時機。</p><h2 id="測試環境"><a href="#測試環境" class="headerlink" title="測試環境"></a>測試環境</h2><p>在我的環境中建立三個目錄，分別代表遠端repository(remoteRepo)、專案目錄(Project)，以及Submodule目錄。<br>要在local端建立空的repository，可以使用bare參數：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init --bare &lt;Repo名稱&gt;<br></code></pre></td></tr></table></figure><p><img src="/ChrisComplete/img/createBareRepo.png"></p><p>接著我們先在submodule目錄下進行git初始化，並且新增一個檔案：file_ver_1，代表submodule的第一版，最後將這個變更進行提交。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/GitTest/Submodule</span><br>git init<br><span class="hljs-built_in">touch</span> file_ver_1<br>git add .<br>git commit -m <span class="hljs-string">&#x27;submodule init commit&#x27;</span><br></code></pre></td></tr></table></figure><p>然後在Project目錄中，將git初始化後，加入一個檔案：main_ver_1，並且使用submodule add將submodule加入專案中，最後當然也要將變更進行提交。<br>這邊我們也將完成的專案push到我們建立的repository中。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/GitTest/Project</span><br>git init<br><span class="hljs-built_in">touch</span> main_ver_1<br>git submodule add ../Submodule/<br>git add .<br>git commit -m <span class="hljs-string">&#x27;main init commit&#x27;</span><br><br>git remote add origin /Users/Chris/GitTest/remoteRepo<br>git push -u origin master<br></code></pre></td></tr></table></figure><p>可以留意在我們加入submodule之後，git會自動幫我們產生一個隱藏檔：.gitmodules，裡面記錄的就是submodule的位置資訊，實務上這個url內容應該為其他遠端的repository，這邊只是為了方便，先用local的位置進行說明。<br><img src="/ChrisComplete/img/gitmodules.png"></p><p>此時我們再回到submodule的目錄中，將檔案更新為：file_ver_2並提交，如此可以營造出”專案目錄中的submodule並非最新版”的情況。  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs base"># ~/GitTest/Submodule<br>mv file_ver_1 file_ver_2<br>git add .<br>git commit -m &#x27;submodule version 2&#x27;<br></code></pre></td></tr></table></figure><p>到這邊我們的測試環境已經準備好，整理一下內容如下圖，我們有一個專案(Project)，包含一個版本1的submodule，而實際來源的submodule最新的版本為2。  </p><pre><code class=" mermaid">flowchart TBsubgraph Submodulefile_ver_2endsubgraph Projectmain_ver_1subgraph submodulefile_ver_1endend</code></pre><h2 id="專案的clone"><a href="#專案的clone" class="headerlink" title="專案的clone"></a>專案的clone</h2><p>在clone專案的時候，若要連同submodule一起clone的話，可以加上recurse-submodules參數。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recurse-submodules /Users/Chris/GitTest/remoteRepo ./ProjectClone<br></code></pre></td></tr></table></figure><p>可以看到clone下來的project會包含submodule，且內容為第1版。<br><img src="/ChrisComplete/img/recurseClone.png"></p><h2 id="更新所有submodule"><a href="#更新所有submodule" class="headerlink" title="更新所有submodule"></a>更新所有submodule</h2><p>此時，若想要將submodule更新到最新版，若單純在專案中執行git pull並不會更新submodule，需要自行進入submodule執行git pull。<br>不過可以透過foreach搭配recursive來自動完成這個工作。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/GitTest/ProjectClone</span><br>git submodule foreach --recursive git pull origin master<br></code></pre></td></tr></table></figure><p>這個指令會遞迴走訪所有submodule，並執行git pull。<br>可以看到執行完畢後，專案中的submodulde內容已經更新為版本2。<br><img src="/ChrisComplete/img/updateSubmoduleToNewer.png"></p><h2 id="與專案同步所有submodule"><a href="#與專案同步所有submodule" class="headerlink" title="與專案同步所有submodule"></a>與專案同步所有submodule</h2><p>若不幸發生將submodule更新到最新版之後，反而因為相容性之類的問題導致build fail的情況，可能會想要將專案中的submodule全部還原到原先clone下來的狀態。<br>更精準的來說，就是還原到主專案原先搭配的submodule版本，此時可以透過submodule update來達成。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/GitTest/ProjectClone</span><br>git submodule update --recursive --init<br></code></pre></td></tr></table></figure><p>可以看到submodule已經還原回原先的版本1。<br><img src="/ChrisComplete/img/submodueUpdate.png"></p><p>值得注意的是訊息中顯示checked out的hash值，實際上可以對應到submodule commit ID，意思就是當你在專案中加入submodule時，其實git是紀錄了submodule對應的commit ID。<br><img src="/ChrisComplete/img/submoduleLog.png"></p><p>除了還原的狀況外，在專案管理者更新了submodule後，你想要同步自己local端的submodule時也可以使用這個指令進行submodule的更新。</p><h2 id="專案更新submodule時"><a href="#專案更新submodule時" class="headerlink" title="專案更新submodule時"></a>專案更新submodule時</h2><p>前面提到加入submodule時，其實是紀錄了commit ID，因此要留意的是，若你是專案管理者，當更新submodule之後也要重新進行commit&#x2F;push，如此才能確保專案紀錄的是對的submodule版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/GitTest/Project</span><br>git submodule foreach --recursive git pull origin master<br>git commit -a -m <span class="hljs-string">&#x27;update submodule&#x27;</span><br>git push<br></code></pre></td></tr></table></figure><p>更新後的submodule內容為版本2。<br><img src="/ChrisComplete/img/updateSubmoduleToV2.png"></p><p>此時，其他clone專案的使用者，可以透過submodule update來同步更新submodule。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/GitTest/ProjectClone</span><br>git pull<br>git submodule update --recursive --init<br></code></pre></td></tr></table></figure><p><img src="/ChrisComplete/img/updateCloneProject.png"></p><h2 id="同步submodule位置"><a href="#同步submodule位置" class="headerlink" title="同步submodule位置"></a>同步submodule位置</h2><p>最後一種狀況是如果submodule更改了repository位置，此時可以透過submodule sync來更新git的config檔內容。  </p><p>例如將submodule更改位置為Submodule_new_location：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># ~/GitTest</span><br><span class="hljs-built_in">mv</span> Submodule Submodule_new_location<br></code></pre></td></tr></table></figure><p>更新project中的submodule path：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># .gitmodules</span><br>[submodule <span class="hljs-string">&quot;Submodule&quot;</span>]<br>path = Submodule<br>url = ../Submodule_new_location/ <span class="hljs-comment"># 修改url</span><br><br><span class="hljs-comment"># .git/config</span><br>[core]<br>  repositoryformatversion = 0 <br>  filemode = <span class="hljs-literal">true</span><br>  bare = <span class="hljs-literal">false</span><br>  logallrefupdates = <span class="hljs-literal">true</span><br>  ignorecase = <span class="hljs-literal">true</span><br>  precomposeunicode = <span class="hljs-literal">true</span><br>[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>  url = /Users/Chris/GitTest/remoteRepo<br>  fetch = +refs/heads/*:refs/remotes/origin/*<br>[branch <span class="hljs-string">&quot;master&quot;</span>]<br>  remote = origin<br>  merge = refs/heads/master<br>[submodule <span class="hljs-string">&quot;Submodule&quot;</span>]<br>  url = /Users/Chris/GitTest/Submodule_new_location/ <span class="hljs-comment"># 修改url</span><br><br><span class="hljs-comment"># .git/modules/Submodule/config</span><br>[core]<br>  repositoryformatversion = 0 <br>  filemode = <span class="hljs-literal">true</span><br>  bare = <span class="hljs-literal">false</span><br>  logallrefupdates = <span class="hljs-literal">true</span><br>  worktree = ../../../Submodule<br>  ignorecase = <span class="hljs-literal">true</span><br>  precomposeunicode = <span class="hljs-literal">true</span><br>[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>  url = /Users/Chris/GitTest/Submodule_new_location/ <span class="hljs-comment"># 修改url</span><br>  fetch = +refs/heads/*:refs/remotes/origin/*<br>[branch <span class="hljs-string">&quot;master&quot;</span>]<br>  remote = origin<br>  merge = refs/heads/master<br><br><span class="hljs-comment"># ~/GitTest/Project</span><br>git commit -a -m <span class="hljs-string">&#x27;update submodule path&#x27;</span><br>git push<br></code></pre></td></tr></table></figure><p>此時若其他原先clone下來的project要進行submodule的git pull會找不到路徑：<br><img src="/ChrisComplete/img/pathMiss.png"></p><p>透過git submodule sync指令可以自動更新config檔內的路徑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br>git submodule <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><p>可以看到config檔內的路徑已經更新，此時再進行submodule的git pull就不會有問題。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># .git/modules/Submodule/config</span><br>[core]<br>  repositoryformatversion = 0 <br>  filemode = <span class="hljs-literal">true</span><br>  bare = <span class="hljs-literal">false</span><br>  logallrefupdates = <span class="hljs-literal">true</span><br>  worktree = ../../../Submodule<br>  ignorecase = <span class="hljs-literal">true</span><br>  precomposeunicode = <span class="hljs-literal">true</span><br>[remote <span class="hljs-string">&quot;origin&quot;</span>]<br>  url = /Users/Chris/GitTest/Submodule_new_location/ <span class="hljs-comment"># 已被更新為新的路徑</span><br>  fetch = +refs/heads/*:refs/remotes/origin/*<br>[branch <span class="hljs-string">&quot;master&quot;</span>]<br>  remote = origin<br>  merge = refs/heads/master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>生產力工具</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Submodule</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Libcurl使用方法</title>
    <link href="/ChrisComplete/2022/06/22/Libcurl-Usage/"/>
    <url>/ChrisComplete/2022/06/22/Libcurl-Usage/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前都是直接使用curl的binary執行檔，不過工作的開發環境是一個嵌入式系統，可能有安全性的考量所以並沒有porting curl，不過可以透過curl的library API在build time的時候把功能做進去，這邊紀錄一下過程。</p><h2 id="環境與安裝"><a href="#環境與安裝" class="headerlink" title="環境與安裝"></a>環境與安裝</h2><h3 id="安裝libcurl"><a href="#安裝libcurl" class="headerlink" title="安裝libcurl"></a>安裝libcurl</h3><p>我的操作環境是Ubuntu Bionic (18.04LTS)，可以直接用apt-get取得：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libcurl4-openssl-dev<br></code></pre></td></tr></table></figure><p>安裝完之後可以確認一下header檔與library的位置：<br><img src="/ChrisComplete/img/curl-package.png"></p><h3 id="架設測試用HTTP-Server"><a href="#架設測試用HTTP-Server" class="headerlink" title="架設測試用HTTP Server"></a>架設測試用HTTP Server</h3><p>為了測試功能，這邊用Python簡單架設一個HTTP servers，支援GET與POST兩個method，並回傳一個JSON格式的response。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> http.server <span class="hljs-keyword">import</span> HTTPServer, BaseHTTPRequestHandler<br><span class="hljs-keyword">import</span> json<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResquestHandler</span>(<span class="hljs-title class_ inherited__">BaseHTTPRequestHandler</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_GET</span>(<span class="hljs-params">self</span>):<br>        data = &#123;<span class="hljs-string">&#x27;result&#x27;</span>:<span class="hljs-string">&#x27;GET_OK&#x27;</span>&#125;<br>        self.send_response(<span class="hljs-number">200</span>)<br>        self.send_header(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        self.end_headers()<br>        self.wfile.write(json.dumps(data).encode())<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_POST</span>(<span class="hljs-params">self</span>):<br>        req_datas = self.rfile.read(<span class="hljs-built_in">int</span>(self.headers[<span class="hljs-string">&#x27;content-length&#x27;</span>])) <br>        <span class="hljs-built_in">print</span>(req_datas.decode())<br>        data = &#123;<span class="hljs-string">&#x27;result&#x27;</span>:<span class="hljs-string">&#x27;POST_OK&#x27;</span>&#125;<br>        self.send_response(<span class="hljs-number">200</span>)<br>        self.send_header(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        self.end_headers()<br>        self.wfile.write(json.dumps(data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    host = (<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">8000</span>)<br>    server = HTTPServer(host, ResquestHandler)<br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>測試GET：<br><img src="/ChrisComplete/img/get-test.png"></p><p>測試POST：<br><img src="/ChrisComplete/img/post-test.png"></p><p>Server端收到的內容：<br><img src="/ChrisComplete/img/http-request.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>使用前要先透過curl_global_init初始化執行環境，以及curl_easy_init初始化session。<br>官方文件有說，curl_global_init至少要執行一次，如果你沒有執行，呼叫curl_easy_init時他也會自動幫你做一次，但是有可能在multi-threaded的狀況下會引發其他問題，建議還是自己手動呼叫一次。<br>此外，curl_easy_init一定要搭配curl_easy_cleanup做清除的動作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">CURL *curl;<br>CURLcode res;<br><span class="hljs-keyword">if</span> (CURLE_OK != (res = curl_global_init(CURL_GLOBAL_ALL))) <br>&#123;   <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CURL Global Init fail\r\n&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;   <br><br>curl = curl_easy_init();<br><span class="hljs-keyword">if</span> (curl == <span class="hljs-literal">NULL</span>) <br>&#123;   <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CURL easy Init fail\r\n&quot;</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-comment">// Do some thing</span><br><br>curl_easy_cleanup(curl);<br></code></pre></td></tr></table></figure><h3 id="發送GET-Request"><a href="#發送GET-Request" class="headerlink" title="發送GET Request"></a>發送GET Request</h3><p>透過curl_easy_setopt來設定要發送的requset相關options，例如URL、Port以及Header等…，接著透過curl_easy_perform發送request。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">curl_easy_setopt(curl, CURLOPT_URL, <span class="hljs-string">&quot;http://localhost&quot;</span>); <span class="hljs-comment">// 設定URL</span><br>curl_easy_setopt(curl, CURLOPT_PORT, <span class="hljs-number">8000</span>); <span class="hljs-comment">// 設定Port</span><br>curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, <span class="hljs-number">0L</span>); <span class="hljs-comment">// 設定SSL certificate verify，0的話則是disable</span><br>curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, <span class="hljs-number">0L</span>); <span class="hljs-comment">// 設定SSL certificate host name的verify，0的話則是disable</span><br>curl_easy_setopt(curl, CURLOPT_SSL_VERIFYSTATUS, <span class="hljs-number">0L</span>); <span class="hljs-comment">// 設定SSL certificate status的verify，0的話則是disable</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">curl_slist</span> *<span class="hljs-title">hs</span>=</span><span class="hljs-literal">NULL</span>;<br>hs = curl_slist_append(hs, <span class="hljs-string">&quot;Content-Type: application/json&quot;</span>); <span class="hljs-comment">// 設定header：&quot;Content-Type: application/json&quot;</span><br>curl_easy_setopt(curl, CURLOPT_HTTPHEADER, hs); <span class="hljs-comment">// 將設定的header列表加入</span><br>res = curl_easy_perform(curl); <span class="hljs-comment">// 送出request</span><br></code></pre></td></tr></table></figure><h3 id="發送POST-Request"><a href="#發送POST-Request" class="headerlink" title="發送POST Request"></a>發送POST Request</h3><p>與發送GET Request類似，不過多了CURLOPT_POSTFIELDS這個option去設定POST的內容。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">curl_easy_setopt(curl, CURLOPT_URL, <span class="hljs-string">&quot;http://localhost&quot;</span>); <br>curl_easy_setopt(curl, CURLOPT_PORT, <span class="hljs-number">8000</span>); <br>curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, <span class="hljs-number">0L</span>);<br>curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, <span class="hljs-number">0L</span>); <br>curl_easy_setopt(curl, CURLOPT_SSL_VERIFYSTATUS, <span class="hljs-number">0L</span>); <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">curl_slist</span> *<span class="hljs-title">hs</span>=</span><span class="hljs-literal">NULL</span>;<br>hs = curl_slist_append(hs, <span class="hljs-string">&quot;Content-Type: application/json&quot;</span>); <br>curl_easy_setopt(curl, CURLOPT_HTTPHEADER, hs);<br>curl_easy_setopt(curl, CURLOPT_POSTFIELDS, <span class="hljs-string">&quot;&#123;\&quot;sendData\&quot;:\&quot;dataContent\&quot;&#125;&quot;</span>); <span class="hljs-comment">// POST內容</span><br>res = curl_easy_perform(curl); <br></code></pre></td></tr></table></figure><h3 id="接收Response"><a href="#接收Response" class="headerlink" title="接收Response"></a>接收Response</h3><p>接收Response要設定CURLOPT_WRITEFUNCTION與CURLOPT_WRITEDATA兩個option。<br>CURLOPT_WRITEFUNCTION用來設定一個callback function，用來處理收到的資料內容。<br>CURLOPT_WRITEDATA用來指定傳給callback function的資料位置，預設是stdout。  </p><p>由於回傳的資料大小不確定，官方的範例中使用一個MemoryStruct結構去保存資料。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MemoryStruct</span> &#123;</span><br><span class="hljs-type">char</span> *memory;<br><span class="hljs-type">size_t</span> size;<br>&#125;;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">write_callback</span><span class="hljs-params">(<span class="hljs-type">char</span> *contents, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, <span class="hljs-type">void</span> *userp)</span>&#123;<br><span class="hljs-type">size_t</span> realsize = size * nmemb;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MemoryStruct</span> *<span class="hljs-title">mem</span> =</span> (<span class="hljs-keyword">struct</span> MemoryStruct *)userp;<br><br><span class="hljs-type">char</span> *ptr = <span class="hljs-built_in">realloc</span>(mem-&gt;memory, mem-&gt;size + realsize + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(!ptr) &#123;<br><span class="hljs-comment">/* out of memory! */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not enough memory (realloc returned NULL)\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>mem-&gt;memory = ptr;<br><span class="hljs-built_in">memcpy</span>(&amp;(mem-&gt;memory[mem-&gt;size]), contents, realsize);<br>mem-&gt;size += realsize;<br>mem-&gt;memory[mem-&gt;size] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">return</span> realsize;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MemoryStruct</span> <span class="hljs-title">chunk</span>;</span><br>chunk.memory = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br>chunk.size = <span class="hljs-number">0</span>;<br>curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);<br>curl_easy_setopt(curl, CURLOPT_WRITEDATA,  (<span class="hljs-type">void</span> *)&amp;chunk);<br></code></pre></td></tr></table></figure><h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;curl/curl.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MemoryStruct</span> &#123;</span><br><span class="hljs-type">char</span> *memory;<br><span class="hljs-type">size_t</span> size;<br>&#125;;<br><br><span class="hljs-type">size_t</span> <span class="hljs-title function_">write_callback</span><span class="hljs-params">(<span class="hljs-type">char</span> *contents, <span class="hljs-type">size_t</span> size, <span class="hljs-type">size_t</span> nmemb, <span class="hljs-type">void</span> *userp)</span>&#123;<br><span class="hljs-type">size_t</span> realsize = size * nmemb;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MemoryStruct</span> *<span class="hljs-title">mem</span> =</span> (<span class="hljs-keyword">struct</span> MemoryStruct *)userp;<br><br><span class="hljs-type">char</span> *ptr = <span class="hljs-built_in">realloc</span>(mem-&gt;memory, mem-&gt;size + realsize + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(!ptr) &#123;<br><span class="hljs-comment">/* out of memory! */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not enough memory (realloc returned NULL)\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>mem-&gt;memory = ptr;<br><span class="hljs-built_in">memcpy</span>(&amp;(mem-&gt;memory[mem-&gt;size]), contents, realsize);<br>mem-&gt;size += realsize;<br>mem-&gt;memory[mem-&gt;size] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">return</span> realsize;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>CURL *curl;<br>CURLcode res;<br><br><span class="hljs-comment">// 初始化 </span><br><span class="hljs-keyword">if</span> (CURLE_OK != (res = curl_global_init(CURL_GLOBAL_ALL))) <br>&#123;   <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CURL Global Init fail\r\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;   <br>curl = curl_easy_init();<br><span class="hljs-keyword">if</span> (curl == <span class="hljs-literal">NULL</span>) <br>&#123;   <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CURL easy Init fail\r\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 發送GET Request</span><br>curl_easy_setopt(curl, CURLOPT_URL, <span class="hljs-string">&quot;http://localhost&quot;</span>); <br>curl_easy_setopt(curl, CURLOPT_PORT, <span class="hljs-number">8000</span>);<br><span class="hljs-comment">//curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);</span><br><span class="hljs-comment">//curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);</span><br><span class="hljs-comment">//curl_easy_setopt(curl, CURLOPT_SSL_VERIFYSTATUS, 0L);</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">curl_slist</span> *<span class="hljs-title">hs</span>=</span><span class="hljs-literal">NULL</span>;<br>hs = curl_slist_append(hs, <span class="hljs-string">&quot;Content-Type: application/json&quot;</span>);<br>curl_easy_setopt(curl, CURLOPT_HTTPHEADER, hs);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MemoryStruct</span> <span class="hljs-title">chunk</span>;</span><br>chunk.memory = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br>chunk.size = <span class="hljs-number">0</span>;<br>curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);<br>curl_easy_setopt(curl, CURLOPT_WRITEDATA,  (<span class="hljs-type">void</span> *)&amp;chunk);<br><br>res = curl_easy_perform(curl);<br><span class="hljs-keyword">if</span>(res != CURLE_OK)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CURL curl_easy_perform fail: %s\r\n&quot;</span>, curl_easy_strerror(res));<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Response data:\r\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chunk.memory);<br>&#125;<br><br>    <span class="hljs-comment">// 重置內容        </span><br>curl_easy_reset(curl);<br><br><span class="hljs-comment">// 發送POST Request，內容為：&#123;&quot;sendData&quot;: &quot;dataContent&quot;&#125;</span><br>curl_easy_setopt(curl, CURLOPT_URL, <span class="hljs-string">&quot;http://localhost&quot;</span>); <br>curl_easy_setopt(curl, CURLOPT_PORT, <span class="hljs-number">8000</span>);<br>curl_easy_setopt(curl, CURLOPT_HTTPHEADER, hs);<br>curl_easy_setopt(curl, CURLOPT_POSTFIELDS, <span class="hljs-string">&quot;&#123;\&quot;sendData\&quot;:\&quot;dataContent\&quot;&#125;&quot;</span>);<br>chunk.memory = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">1</span>);<br>chunk.size = <span class="hljs-number">0</span>;<br>curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);<br>curl_easy_setopt(curl, CURLOPT_WRITEDATA,  (<span class="hljs-type">void</span> *)&amp;chunk);<br>res = curl_easy_perform(curl);<br><span class="hljs-keyword">if</span>(res != CURLE_OK)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;CURL curl_easy_perform fail: %s\r\n&quot;</span>, curl_easy_strerror(res));<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Response data:\r\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,chunk.memory);<br>&#125;<br><br>curl_easy_cleanup(curl);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="編譯與執行"><a href="#編譯與執行" class="headerlink" title="編譯與執行"></a>編譯與執行</h3><p>透過gcc進行編譯，指定curl library。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc curl.c -lcurl -o curlTest<br></code></pre></td></tr></table></figure><p>執行結果：<br><img src="/ChrisComplete/img/curl-test-result.png"></p><p>Server端的結果：<br><img src="/ChrisComplete/img/curl-server-test-result.png"></p><p>若有需要可以再搭配JSON-C將response做進一步的處理。</p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><p><a href="https://curl.se/">官方文件</a><br><a href="https://docs.python.org/3/library/http.server.html">HTTP Server</a></p>]]></content>
    
    
    <categories>
      
      <category>程式設計</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>CURL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON-C的使用方法</title>
    <link href="/ChrisComplete/2022/06/21/Json-c-Usage/"/>
    <url>/ChrisComplete/2022/06/21/Json-c-Usage/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近因為工作需要，要透過JSON-C這個library對JSON格式的資料進行處理。<br>這邊筆記一下相關的使用方法。</p><h2 id="環境與安裝"><a href="#環境與安裝" class="headerlink" title="環境與安裝"></a>環境與安裝</h2><p>本來打算clone source code下來之後自己build，不過過程遇到一些問題，以後有時間解決再更新上來。<br>我的操作環境是Ubuntu Bionic (18.04LTS)，可以直接用apt-get取得：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libjson-c-dev<br></code></pre></td></tr></table></figure><p>不過僅能取得版本0.12.1的JSON-C，而JSON-C有一個可以走訪整個JSON Object的實做(json_visit)要再0.13版才有，暫時玩不到了，以後有機會再補。  </p><p>安裝完之後可以確認一下header檔與library的位置：<br><img src="/ChrisComplete/img/json-c_query.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="初始化JSON-Object"><a href="#初始化JSON-Object" class="headerlink" title="初始化JSON Object"></a>初始化JSON Object</h3><p>因為懶得每次都要打很長一串的struct type，先做一個typedef，接著使用json_object_new_object()初始化一個空的JSON Object作為根物件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;json-c/json.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span>* <span class="hljs-title">jsonObj</span>;</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>jsonObj root = json_object_new_object();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="建立與加入物件"><a href="#建立與加入物件" class="headerlink" title="建立與加入物件"></a>建立與加入物件</h3><p>接著可以透過json_object_new_string()、json_object_new_int()等…函數來建立JSON Object。<br>支援的型態包括：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">json_type_null<br>json_type_boolean<br>json_type_double<br>json_type_int<br>json_type_string<br>json_type_object<br>json_type_array<br></code></pre></td></tr></table></figure><p>實際用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">jsonObj obj = json_object_new_string(<span class="hljs-string">&quot;Chris&quot;</span>); <span class="hljs-comment">// 建立字串&quot;Chris&quot;</span><br>json_object_object_add(root, <span class="hljs-string">&quot;name&quot;</span>, obj); <span class="hljs-comment">// 將字串物件加到root根物件中</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>obj = json_object_new_int(<span class="hljs-number">30</span>); <span class="hljs-comment">// 建立int物件</span><br>json_object_object_add(root, <span class="hljs-string">&quot;age&quot;</span>, obj); <span class="hljs-comment">// 將int物件加到root根物件中</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&quot;age&quot;: 30</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>jsonObj arrObj = json_object_new_array(); <span class="hljs-comment">// 建立陣列物件</span><br>obj = json_object_new_int(<span class="hljs-number">1</span>); <span class="hljs-comment">// 建立int物件，內容為1</span><br>json_object_array_add(arrObj, obj); <span class="hljs-comment">// 將int物件加入陣列物件中</span><br>obj = json_object_new_int(<span class="hljs-number">2</span>); <span class="hljs-comment">// 建立int物件，內容為2</span><br>json_object_array_add(arrObj, obj); <span class="hljs-comment">// 將int物件加入陣列物件中</span><br>json_object_object_add(root, <span class="hljs-string">&quot;array&quot;</span>, arrObj); <span class="hljs-comment">// 將陣列物件加入root根物件中</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&quot;age&quot;: 30</span><br><span class="hljs-comment">&quot;array&quot;: [1, 2]</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="JSON-Parser"><a href="#JSON-Parser" class="headerlink" title="JSON Parser"></a>JSON Parser</h3><p>另外也可以在JSON Object中加入其他的Object，來源可以是透過將JSON字串內容pase成JSON Object，或者是透過讀取JSON檔案。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">obj = json_tokener_parse(<span class="hljs-string">&quot;&#123;&#x27;address&#x27;:&#x27;XXXXXXXXXXXXXXXXX&#x27;, &#x27;deposit&#x27;:999999999, &#x27;arr&#x27;:[3, 4, 5]&#125;&quot;</span>); <span class="hljs-comment">// 透過字串進行parse</span><br><span class="hljs-comment">// obj = json_object_from_file(&quot;./info.json&quot;); // 也可以透過讀取JSON檔</span><br><br>json_object_object_add(root, <span class="hljs-string">&quot;info&quot;</span>, obj); <span class="hljs-comment">// 將JSON Object加入root根物件</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&quot;age&quot;: 30</span><br><span class="hljs-comment">&quot;array&quot;: [1, 2]</span><br><span class="hljs-comment">&quot;info&quot;: &#123;</span><br><span class="hljs-comment">&quot;address&quot;: &quot;XXXXXXXXXXXXXXXXX&quot;,</span><br><span class="hljs-comment">   &quot;deposit&quot;: 999999999,</span><br><span class="hljs-comment">   &quot;arr&quot;: [3, 4, 5]</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="物件的走訪"><a href="#物件的走訪" class="headerlink" title="物件的走訪"></a>物件的走訪</h3><p>這邊實做一個function，除了印出基本型態的物件內容外，也可以用遞迴的方式將物件內包含的其他物件進行走訪。<br>之後有機會嘗試json_visit的話再補上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(jsonObj root)</span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> level = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用來紀錄階層，排版用</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object_iterator</span> <span class="hljs-title">it</span>;</span> <span class="hljs-comment">// 建立兩個iterator，指著起點與終點</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object_iterator</span> <span class="hljs-title">itEnd</span>;</span><br>it = json_object_iter_begin(root); <span class="hljs-comment">// 將根物件作為起點</span><br>itEnd = json_object_iter_end(root); <span class="hljs-comment">// 走回到根物件時作為終點</span><br><span class="hljs-keyword">while</span> (!json_object_iter_equal(&amp;it, &amp;itEnd)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;level; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t&quot;</span>); <span class="hljs-comment">// 每進入一層物件，多一個tab作為排版</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,json_object_iter_peek_name(&amp;it)); <span class="hljs-comment">// 顯示物件的key</span><br>jsonObj obj = json_object_iter_peek_value(&amp;it); <span class="hljs-comment">// 取得物件內容值</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">array_list</span> * <span class="hljs-title">list</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">switch</span>(json_object_get_type(obj))&#123; <span class="hljs-comment">// 判斷物件類型</span><br><span class="hljs-keyword">case</span> json_type_boolean:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, json_object_get_boolean(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_double:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>, json_object_get_double(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_int:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, json_object_get_int(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_string:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, json_object_get_string(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_array: <span class="hljs-comment">// 將陣列內容印出，這邊都假設陣列類型皆為int</span><br><span class="hljs-built_in">list</span> = json_object_get_array(obj);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">list</span>-&gt;length; i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, json_object_get_int(json_object_array_get_idx(obj, i)));<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_object:<br>level++;<br>visit(json_object_get(obj)); <span class="hljs-comment">// 若物件內包含物件，遞迴走訪</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_null:<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>    json_object_iter_next(&amp;it);<br>&#125;<br><br>level--;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整程式碼"><a href="#完整程式碼" class="headerlink" title="完整程式碼"></a>完整程式碼</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;json-c/json.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object</span>* <span class="hljs-title">jsonObj</span>;</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(jsonObj root)</span>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> level = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object_iterator</span> <span class="hljs-title">it</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">json_object_iterator</span> <span class="hljs-title">itEnd</span>;</span><br>it = json_object_iter_begin(root);<br>itEnd = json_object_iter_end(root);<br><span class="hljs-keyword">while</span> (!json_object_iter_equal(&amp;it, &amp;itEnd)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\r\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;level; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\t&quot;</span>); <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s &quot;</span>,json_object_iter_peek_name(&amp;it));<br>jsonObj obj = json_object_iter_peek_value(&amp;it);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">array_list</span> * <span class="hljs-title">list</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">switch</span>(json_object_get_type(obj))&#123;<br><span class="hljs-keyword">case</span> json_type_boolean:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, json_object_get_boolean(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_double:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%f&quot;</span>, json_object_get_double(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_int:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, json_object_get_int(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_string:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, json_object_get_string(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_array:<br><span class="hljs-built_in">list</span> = json_object_get_array(obj);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-built_in">list</span>-&gt;length; i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, json_object_get_int(json_object_array_get_idx(obj, i)));<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_object:<br>level++;<br>visit(json_object_get(obj));<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> json_type_null:<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>    json_object_iter_next(&amp;it);<br>&#125;<br><br>level--;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\r\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>jsonObj root = json_object_new_object(); <br>jsonObj obj = json_object_new_string(<span class="hljs-string">&quot;Chris&quot;</span>);<br>json_object_object_add(root, <span class="hljs-string">&quot;name&quot;</span>, obj); <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>obj = json_object_new_int(<span class="hljs-number">30</span>);<br>json_object_object_add(root, <span class="hljs-string">&quot;age&quot;</span>, obj); <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&quot;age&quot;: 30</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><br>jsonObj arrObj = json_object_new_array();<br>obj = json_object_new_int(<span class="hljs-number">1</span>);<br>json_object_array_add(arrObj, obj);<br>obj = json_object_new_int(<span class="hljs-number">2</span>);<br>json_object_array_add(arrObj, obj);<br>json_object_object_add(root, <span class="hljs-string">&quot;array&quot;</span>, arrObj); <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&quot;age&quot;: 30</span><br><span class="hljs-comment">&quot;array&quot;: [1, 2]</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>obj = json_tokener_parse(<span class="hljs-string">&quot;&#123;&#x27;address&#x27;:&#x27;XXXXXXXXXXXXXXXXX&#x27;, &#x27;deposit&#x27;:999999999, &#x27;arr&#x27;:[3, 4, 5]&#125;&quot;</span>);<br> <span class="hljs-comment">//obj = json_object_from_file(&quot;./info.json&quot;);</span><br>json_object_object_add(root, <span class="hljs-string">&quot;info&quot;</span>, obj); <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">&quot;name&quot;: &quot;Chris&quot;</span><br><span class="hljs-comment">&quot;age&quot;: 30</span><br><span class="hljs-comment">&quot;array&quot;: [1, 2]</span><br><span class="hljs-comment">&quot;info&quot;: &#123;</span><br><span class="hljs-comment">&quot;address&quot;: &quot;XXXXXXXXXXXXXXXXX&quot;,</span><br><span class="hljs-comment">   &quot;deposit&quot;: 999999999,</span><br><span class="hljs-comment">   &quot;arr&quot;: [3, 4, 5]</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>visit(root);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="編譯與執行"><a href="#編譯與執行" class="headerlink" title="編譯與執行"></a>編譯與執行</h3><p>透過gcc進行編譯，指定json-c library的搜尋目錄與link名稱。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc Json-c.c -ljson-c -L /usr/lib/x86_64-linux-gnu/ -o output<br></code></pre></td></tr></table></figure><p><img src="/ChrisComplete/img/jsonc_build_run.png"></p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><p><a href="https://json-c.github.io/json-c/json-c-0.15/doc/html/index.html">官方文件</a></p>]]></content>
    
    
    <categories>
      
      <category>程式設計</category>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>JSON-C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>網路機器人、網路蜘蛛與網路爬蟲 PHP/CURL程式設計指南(第二版)</title>
    <link href="/ChrisComplete/2022/06/19/PHP-CURL-Programming/"/>
    <url>/ChrisComplete/2022/06/19/PHP-CURL-Programming/</url>
    
    <content type="html"><![CDATA[<p><img src="/ChrisComplete/img/phpcurl_cover.png"><br>Michael Schrenk 著 &#x2F; 藍子軒 譯</p><h2 id="Part-I-基本概念與技術"><a href="#Part-I-基本概念與技術" class="headerlink" title="Part I 基本概念與技術"></a>Part I 基本概念與技術</h2><h3 id="Chapter-1-網路機器人是什麼？能吃嗎？"><a href="#Chapter-1-網路機器人是什麼？能吃嗎？" class="headerlink" title="Chapter 1. 網路機器人是什麼？能吃嗎？"></a>Chapter 1. 網路機器人是什麼？能吃嗎？</h3><ul><li>解放網際網路真正的淺力</li><li>對程式開發者的用處：<br>有趣、讓駭客行為變得有建設性  </li><li>對企業領導者的用處：<br>客製化應用、小投資大收穫</li></ul><h3 id="Chapter-2-關於網路機器人的一些構想"><a href="#Chapter-2-關於網路機器人的一些構想" class="headerlink" title="Chapter 2. 關於網路機器人的一些構想"></a>Chapter 2. 關於網路機器人的一些構想</h3><ul><li>從瀏覽器的限制中獲取靈感：</li></ul><ol><li>TrackRates.com : 彙整篩選飯店房價  </li><li>WebSiteOptimization.com : 分析網站效能  </li><li>Pokerbot : 撲克牌機器人，模仿行為</li></ol><h3 id="Chapter-3-下載網頁"><a href="#Chapter-3-下載網頁" class="headerlink" title="Chapter 3. 下載網頁"></a>Chapter 3. 下載網頁</h3><ul><li>把它想成是檔案，而不是網頁  </li><li>利用PHP的內建函式來下載檔案</li></ul><p>1. 使用fopen() + fgets()</p><pre><code class="hljs">&lt;?php$target = &quot;http://www.webbotsspidersscreenscrapers.com/hello_world.html&quot;;$file_handle = fopen($target, &quot;r&quot;);while(!feof($file_handle))    echo fgets($file_handle, 4096);fclose($file_handle);?&gt;</code></pre><p>2. 使用file()</p><pre><code class="hljs">&lt;?php$target = &quot;http://www.webbotsspidersscreenscrapers.com/hello_world.html&quot;;$downloaded_page_array = file($target);for($xx=0; $xx&lt;cout($downloaded_page_array); $xx++)    echo $downloaded_page_array[$xx]?&gt;</code></pre><ul><li>PHP&#x2F;CURL簡介<br>名稱由來：client+URL</li></ul><ol><li>支援多種傳輸協定  </li><li>表單提交  </li><li>基本身份認證  </li><li>Cookie  </li><li>重導向  </li><li>假冒代理程式的名稱  </li><li>引用參照的管理  </li><li>Socket管理</li></ol><ul><li>安裝PHP&#x2F;CURL  </li><li>LIB_http</li></ul><h3 id="Chapter-4-基本解析技術"><a href="#Chapter-4-基本解析技術" class="headerlink" title="Chapter 4. 基本解析技術"></a>Chapter 4. 基本解析技術</h3><ul><li>資料就藏在一堆標籤中  </li><li>如果HTML寫得很爛，該如何解析？<br>&gt;使用HTMLTidy函式庫進行預處理 </li><li>標準解析常函式  </li><li>使用LIB_parse  </li><li>幾個有用的PHP函式</li></ul><ol><li>stristr() : 測試字串是否包含在字串，在乾草堆(haystack，未解析的文字)中找縫衣針(needle，子字串)，strstr()分大小寫  </li><li>str_replace() : 字串取代  </li><li>strip_tags() : 去除HTML格式  </li><li>similar_test() : 比較相似程度</li></ol><ul><li>最終的想法</li></ul><ol><li>千萬不要信任一個原始碼寫得很差的網頁  </li><li>解析時盡量區分成幾個小步驟  </li><li>就算是除錯，也別用瀏覽器來展現解析結果  </li><li>使用正規表示法時要特別謹慎</li></ol><h3 id="Chapter-5-運用正規表達式的高級解析技術"><a href="#Chapter-5-運用正規表達式的高級解析技術" class="headerlink" title="Chapter 5. 運用正規表達式的高級解析技術"></a>Chapter 5. 運用正規表達式的高級解析技術</h3><ul><li>正規表示法的關鍵-模式匹配  </li><li>PHP的正規表示法有兩種：</li></ul><ol><li>PCRE(Perl相容正規表示法，以preg_開頭)</li><li>POSIX(延伸正規表示法，以ereg開頭，PHP 5.3.0以後棄用)</li></ol><p>PHP正規表示法函式：</p><pre><code class="hljs">preg_replace(pattern, replacement, subject)preg_match(pattern, subject)preg_match_all(pattern, subject, result_array)preg_split(pattern, subject)</code></pre><ul><li><p>透過範例學習模式<br>\d: 數字<br>\d+: 1個以上的數字<br>\b: 邊界<br>\D: 非數字字元<br>\b\D\D\D\b or \b\D{3}\b: 匹配連續3個字母<br>.: wildcard  </p></li><li><p>正規表示法中，對網路機器人開發者特別有趣的部分  </p></li><li><p>哪些情況適合(或不適合)使用正規表示法作為解析工具？<br>正規表示法的缺點：不擅長表達資料間的關聯性、正規表示法提供太多選擇、正規表示法比較難以除錯、正規表示法會讓你的程式碼變複雜</p></li></ul><h3 id="Chapter-6-表單提交的自動化"><a href="#Chapter-6-表單提交的自動化" class="headerlink" title="Chapter 6. 表單提交的自動化"></a>Chapter 6. 表單提交的自動化</h3><ul><li><p>對表單介面進行逆向工程  </p></li><li><p>表單處理器、資料欄位、傳遞方法、事件觸發  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form <span class="hljs-type">name</span>=&quot;frml&quot; action=&quot;form_handler&quot;(表單處理器) <span class="hljs-keyword">method</span>=&quot;get&quot;(傳遞方法)&gt;<br>    &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;textbox&quot; <span class="hljs-type">name</span>=&quot;email&quot;&gt;(資料欄位)<br>    &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot;&gt;(事件觸發)<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><strong>表單處理器(Form Handler)</strong><br>action屬性，不指定的話則與處理表單為同一個頁面。<br><strong>資料欄位(Data Field)</strong><br>最重要的是名稱(name)與值(value)。<br><strong>傳遞方法(Method)</strong><br>GET：250字元長度左右、資料無法加密<br>POST：好幾MB、資料可以加密<br>Multipart Encoding：POST方法的延伸，可以傳送local檔案</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;form name=<span class="hljs-string">&quot;frm1&quot;</span> <span class="hljs-keyword">method</span>=<span class="hljs-string">&quot;POST&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> action=<span class="hljs-string">&quot;...&quot;</span>&gt;<br>&lt;/form&gt;<br><br><span class="hljs-comment">//script版本：</span><br>$post = <span class="hljs-built_in">array</span>(<span class="hljs-string">&quot;uploadedfile&quot;</span> =&gt; <span class="hljs-string">&quot;@&quot;</span>.$full_path_name_of_file);<br>$ch = curl<span class="hljs-constructor">_init()</span>;<br>curl<span class="hljs-constructor">_setopt($<span class="hljs-params">ch</span>, CURLOPT_URL, $<span class="hljs-params">form_action_URL</span>)</span>;<br>curl<span class="hljs-constructor">_setopt($<span class="hljs-params">ch</span>, CURLOPT_POST, <span class="hljs-params">true</span>)</span>;<br>curl<span class="hljs-constructor">_setopt($<span class="hljs-params">ch</span>, CURLOPT_POSTFIELDS, $<span class="hljs-params">post</span>)</span>;<br>$response = curl<span class="hljs-constructor">_exec($<span class="hljs-params">ch</span>)</span>;<br></code></pre></td></tr></table></figure><p><strong>事件觸發(Event Trigger)</strong>  </p></li><li><p>無法預測的表單</p></li></ul><ol><li>JavaScript：有可能改變表單  </li><li>機器生成HTML的可讀性  </li><li>Cookie的存在</li></ol><ul><li>表單的分析<br>如果包含session id就需要先下載網頁進行解析</li></ul><h3 id="Chapter-7-管理大量的資料"><a href="#Chapter-7-管理大量的資料" class="headerlink" title="Chapter 7. 管理大量的資料"></a>Chapter 7. 管理大量的資料</h3><ul><li>資料的組織化<br>根據資料特性選擇儲存結構<br><strong>命名慣例</strong></li></ul><ol><li>切實執行  </li><li>使用物件的類型命名而非本身的名稱  </li><li>考慮使用此結構的對象(人？電腦？)  </li><li>定義命名格式  </li><li>對標籤使用同一詞性  </li><li>命名考慮排序方便性<br><strong>把資料儲存在結構化的檔案目錄之中</strong><br><strong>將文字儲存到資料庫中</strong>  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//LIB_mysql</span><br><span class="hljs-function"><span class="hljs-title">insert</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">update</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">exe_sql</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><strong>將圖像儲存到資料庫中</strong><br>將圖檔轉成blob  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 透過Base-<span class="hljs-number">64</span>編碼<br><span class="hljs-variable">$data_array</span>[<span class="hljs-string">&#x27;IMAGE&#x27;</span>] = base64_encode(file_get_contents(<span class="hljs-variable">$file_path</span>));<br><br><span class="hljs-regexp">//</span> 顯示資料庫內圖檔<br>&lt;img src=<span class="hljs-string">&quot;show_image.php?img_id=6&quot;</span>&gt;<br><br><span class="hljs-regexp">//</span> show_img.php<br>&lt;?<br>include(<span class="hljs-string">&quot;LIB_mysql.php&quot;</span>);<br><span class="hljs-variable">$image_id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;img_id&#x27;</span>];<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select IMAGE from table where IMAGE_ID=&#x27;&quot;</span>.<span class="hljs-variable">$image_id</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>list(<span class="hljs-variable">$img</span>) = exe_sql(DATABASE, <span class="hljs-variable">$sql</span>);<br>    <br>header(<span class="hljs-string">&quot;Content-type: image/jpeg&quot;</span>);<br>echo base64_decode(<span class="hljs-variable">$img</span>);<br><span class="hljs-keyword">exit</span>;<br>?&gt;<br></code></pre></td></tr></table></figure></li></ol><ul><li>把資料變小一點</li></ul><ol><li>儲存指向資料的參照  </li><li>壓縮資料<br>對傳進來的檔案進行壓縮：<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 送出可接受壓縮檔的請求<br><span class="hljs-variable">$header</span>[] = <span class="hljs-string">&quot;Accept-Encoding:compress, gzip&quot;</span>;<br>curl_setopt(<span class="hljs-variable">$curl_session</span>, CURLOPT_HTTPHEADER, <span class="hljs-variable">$header</span>);<br><br><span class="hljs-regexp">//</span> 對壓縮檔進行解壓縮<br><span class="hljs-variable">$uncompressed_file</span> = gzuncompress(<span class="hljs-variable">$compressed_file</span>);<br></code></pre></td></tr></table></figure></li><li>移除不需要的格式<br>使用strip_tags()移除HTML標籤  </li><li>為大型圖像檔案建立縮圖，或建立比較小的呈現方式</li></ol><ul><li>運用縮圖  <figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">//利用LIB_thumbnail函式庫  </span><br><span class="hljs-meta"><span class="hljs-keyword">$org</span>_file = &quot;test.jpg&quot;;</span><br><span class="hljs-meta"><span class="hljs-keyword">$new</span>_file_name = &quot;thumbnail.jpg&quot;;</span><br><span class="hljs-meta"><span class="hljs-keyword">$max</span>_width = 90;</span><br><span class="hljs-meta"><span class="hljs-keyword">$max</span>_height = 90;</span><br>create_thumbnail(<span class="hljs-symbol">$</span>org_file, <span class="hljs-symbol">$</span>new_file_name, <span class="hljs-symbol">$</span>max_width, <span class="hljs-symbol">$</span>max_height);<br></code></pre></td></tr></table></figure></li></ul><h2 id="Part-II-案例分享"><a href="#Part-II-案例分享" class="headerlink" title="Part II 案例分享"></a>Part II 案例分享</h2><h3 id="Chapter-8-價格監視用網路機器人"><a href="#Chapter-8-價格監視用網路機器人" class="headerlink" title="Chapter 8. 價格監視用網路機器人"></a>Chapter 8. 價格監視用網路機器人</h3><ul><li>設計一個能解析語意的script腳本  </li><li>目標網頁的初始化與下載<br>ref: chapter8_price_monitoring_bot.php</li></ul><h3 id="Chapter-9-圖像擷取用網路機器人"><a href="#Chapter-9-圖像擷取用網路機器人" class="headerlink" title="Chapter 9. 圖像擷取用網路機器人"></a>Chapter 9. 圖像擷取用網路機器人</h3><ul><li>圖像擷取用網路機器人範例<br>相同檔案名稱、不同目錄</li><li>建立圖像擷取用網路機器人<br>ref: chapter9_image_capture_bot.php</li></ul><h3 id="Chapter-10-鏈結查證用網路機器人"><a href="#Chapter-10-鏈結查證用網路機器人" class="headerlink" title="Chapter 10. 鏈結查證用網路機器人"></a>Chapter 10. 鏈結查證用網路機器人</h3><p>無效鏈結的偵測(Link-Verification)  </p><ul><li>建立一個鏈結查證用網路機器人</li></ul><table><thead><tr><th>HTTP Code</th><th>類別</th><th>意義</th></tr></thead><tbody><tr><td>100-199</td><td>訊息相關</td><td>一般未使用</td></tr><tr><td>200-299</td><td>成功</td><td>請求成功</td></tr><tr><td>300-399</td><td>重導向</td><td>頁面被移走了</td></tr><tr><td>400-499</td><td>客戶端錯誤</td><td>客戶端發出錯誤請求</td></tr><tr><td>500-599</td><td>伺服器錯誤</td><td>伺服器錯誤</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-variable">$status_code_array</span>於LIB_http_codes同時建立<br><span class="hljs-variable">$status_code_array</span>[<span class="hljs-variable">$download_link</span>[<span class="hljs-string">&#x27;STATUS&#x27;</span>][<span class="hljs-string">&#x27;http_code&#x27;</span>]] <span class="hljs-regexp">//</span> 狀態碼轉文字<br><span class="hljs-variable">$download_link</span>[<span class="hljs-string">&#x27;STATUS&#x27;</span>][<span class="hljs-string">&#x27;http_code&#x27;</span>] <span class="hljs-regexp">//</span> 下載頁面花費時間<br></code></pre></td></tr></table></figure><ul><li>網路機器人的運行<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> LIB_http_codes<br>include(LIB_http_codes.php)<br>echo <span class="hljs-variable">$status_code_array</span>[<span class="hljs-variable">$YOUR_HEEP_CODE</span>][<span class="hljs-string">&#x27;MSG&#x27;</span>];<br><br><span class="hljs-regexp">//</span>LIB_resolve_address<br>resolve_address(<span class="hljs-variable">$link</span>, <span class="hljs-variable">$page_base</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="Chapter-11-搜尋排名用網路機器人"><a href="#Chapter-11-搜尋排名用網路機器人" class="headerlink" title="Chapter 11. 搜尋排名用網路機器人"></a>Chapter 11. 搜尋排名用網路機器人</h3><ul><li>對一個搜尋結果頁面進行描述<br>付費區域&#x2F;組織過的結果(SEO結果)<br>“下一頁”的位置</li><li>搜尋排名用網路機器人的工作方式<br>輸入”關鍵字”與”要找的頁面”，尋找排名結果：頁面.筆數</li><li>搜尋排名用網路機器人的執行</li><li>搜尋排名用網路機器人的工作原理</li></ul><ol><li>變數初始化  </li><li>使用”關鍵字”於搜尋引擎進行搜索  </li><li>跳過網告與導覽文字  </li><li>檢查搜尋頁面是否出現於結果中  </li><li>報告結果</li></ol><ul><li>搜尋排名用網路機器人的script腳本<br>ref: chapter11_search_ranking_bot.php<br>插入解析(insertion parse)：於資料內部插入自定義的tag(如&lt;data&gt;)</li><li>最終想法<br>善待你的資料來源<br>搜尋網站對待網路機器人時，可能與瀏覽器不同<br>讓網路蜘蛛搜刮搜尋引擎的資料，可不是好主意</li><li>進一步的探索</li></ul><h3 id="Chapter-12-彙整用網路機器人"><a href="#Chapter-12-彙整用網路機器人" class="headerlink" title="Chapter 12. 彙整用網路機器人"></a>Chapter 12. 彙整用網路機器人</h3><p>範例應用：Google Map結合房地產資訊，顯示彙整結果頁面  </p><ul><li>為網路機器人選擇資料的來源<br>API或RSS  </li><li>彙整用網路機器人的範例<br>RSS饋送資料的方式  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// RSS feed<br>&lt;title&gt;<br>    RSS Feed Title<br>&lt;/title&gt;<br>&lt;link&gt;<br>    www.Link_to_web_page.com<br>&lt;/link&gt;<br>&lt;description&gt;<br>    Description <span class="hljs-keyword">of</span> RSS feed<br>&lt;/description&gt;<br>&lt;copyright&gt;<br>    Copyright <span class="hljs-keyword">notice</span><br>&lt;/copyright&gt;<br>&lt;lastBuildDate&gt;<br>    <span class="hljs-type">Date</span> <span class="hljs-keyword">of</span> RSS <span class="hljs-keyword">publication</span><br>&lt;/lastBuildDate&gt;<br><br>// RSS Item<br>&lt;item&gt;<br>    &lt;title&gt; Title <span class="hljs-keyword">of</span> Item &lt;/title&gt;<br>    &lt;link&gt; URL <span class="hljs-keyword">of</span> associated web page <span class="hljs-keyword">for</span> item &lt;/link&gt;<br>    &lt;description&gt; Description <span class="hljs-keyword">of</span> item &lt;/description&gt;<br>    &lt;pubDate&gt; <span class="hljs-keyword">Publication</span> <span class="hljs-type">date</span> <span class="hljs-keyword">of</span> item &lt;/pubDate&gt;<br>&lt;/item&gt;<br></code></pre></td></tr></table></figure></li></ul><p>ref: chapter12_aggregation_bot.php<br>CDATA: XML用CDATA標籤來識別不應該被解釋為XML的標籤<br>&lt;![[…文字…]]&gt;</p><ul><li>在你的彙整用網路機器人中加入篩選的功能  </li><li>進一步的探索</li></ul><h3 id="Chapter-13-FTP網路機器人"><a href="#Chapter-13-FTP網路機器人" class="headerlink" title="Chapter 13. FTP網路機器人"></a>Chapter 13. FTP網路機器人</h3><ul><li>FTP網路機器人範例<br>ref: chapter13_ftp_bot.php  </li><li>PHP與FTP<br>PHP支援的一般FTP指令</li></ul><table><thead><tr><th>FTP函式($ftp：FTP File Stream)</th><th>用法</th></tr></thead><tbody><tr><td>ftp_cdup($ftp)</td><td>使附目錄變成目前的目錄</td></tr><tr><td>ftp_chdir($ftp, “directory&#x2F;path”)</td><td>改變目前的目錄</td></tr><tr><td>ftp_delete($ftp, “filename”)</td><td>刪除某個檔案</td></tr><tr><td>ftp_get($ftp, “local file”, “remote file”, MODE)</td><td>將遠端的檔案拷貝到本機檔案，MODE: FTP_ASCII&#x2F;FTP_BINARY</td></tr><tr><td>ftp_mkdir($ftp, “directory name”)</td><td>建立一個新的目錄</td></tr><tr><td>ftp_rename($ftp, “file name”)</td><td>在FTP伺服器上更改檔案或目錄名稱</td></tr><tr><td>ftp_put($ftp, “remote file”, “local file”, MODE)</td><td>將本機的檔案拷貝至遠端的檔案，MODE: FTP_ASCII&#x2F;FTP_BINARY</td></tr><tr><td>ftp_rmdir($ftp, “directory&#x2F;path”)</td><td>移除一個目錄</td></tr><tr><td>ftp_rawlist($ftp, “directory&#x2F;path”)</td><td>送回一個陣列，元素為檔案訊息</td></tr></tbody></table><ul><li>進一步的探索</li></ul><h3 id="Chapter-14-能讀取電子郵件的網路機器人"><a href="#Chapter-14-能讀取電子郵件的網路機器人" class="headerlink" title="Chapter 14. 能讀取電子郵件的網路機器人"></a>Chapter 14. 能讀取電子郵件的網路機器人</h3><ul><li>POP3協定<br>利用telnet登入POP3郵件伺服器<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">telnet mail<span class="hljs-selector-class">.server</span><span class="hljs-selector-class">.net</span> <span class="hljs-number">110</span><br></code></pre></td></tr></table></figure>讀取郵件：</li></ul><ol><li>LIST指令取得編號  </li><li>RETR &lt;編號&gt;：讀取內容<br>刪除郵件：  </li><li>DELE &lt;編號&gt;  </li><li>QUIT &#x2F;&#x2F;執行後才真正刪除<br>RSET &lt;編號&gt;：QUIT前可還原刪除動作</li></ol><ul><li><p>利用網路機器人來執行POP3協定<br>利用PHP的opensocket()、fputs()和fgets()執行POP3指令<br>ref. chapter14_email_reading_bot.php</p></li><li><p>進一步的探索<br>不相容系統之間的介面：發送檔案至mailbox讓機器人讀取後處理</p></li></ul><h3 id="Chapter-15-能發送電子郵件的網路機器人"><a href="#Chapter-15-能發送電子郵件的網路機器人" class="headerlink" title="Chapter 15. 能發送電子郵件的網路機器人"></a>Chapter 15. 能發送電子郵件的網路機器人</h3><ul><li>電子郵件、網路機器人與垃圾郵件<br>避免成為垃圾郵件指導原則：</li></ul><ol><li>允許收件人取消訂閱  </li><li>避免多個重複的郵件  </li><li>使用恰當的標題  </li><li>表明你自己的身份  </li><li>遵守法律規定</li></ol><ul><li>利用SMTP與PHP來發送郵件<br>編輯php.ini配置檔<br>關閉郵件伺服器的中繼傳輸(relay host)功能，避免成為垃圾郵件跳板<br>PHP的mail()函式  <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">$email_address = <span class="hljs-string">&quot;account@someserver.com&quot;</span>;<br>$email_subject = <span class="hljs-string">&quot;SUBJECT&quot;</span>;<br>$email_message = <span class="hljs-string">&quot;MESSAGE&quot;</span>;<br>mail($email_address, $email_subject, $email_message);<br></code></pre></td></tr></table></figure>利用LIB_mail發送格式化的郵件</li></ul><table><thead><tr><th>LIB_mail地址種類</th><th>功能</th><th>必要或選擇</th></tr></thead><tbody><tr><td>To</td><td>主要收件人地址</td><td>必要</td></tr><tr><td>Reply-to</td><td>回覆地址</td><td>選擇</td></tr><tr><td>Return-path</td><td>無法傳送時，通知地址</td><td>選擇</td></tr><tr><td>From</td><td>寄件人地址</td><td>必要</td></tr><tr><td>Cc</td><td>其他收件人</td><td>選擇</td></tr><tr><td>Bcc</td><td>密件副本</td><td>選擇</td></tr></tbody></table><ul><li>編寫一個能發送電子郵件通知的網路機器人<br>網頁內容變化時，發送電子郵件的網路機器人：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;LIB_http.php&quot;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;LIB_mysql.php&quot;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;LIB_mail.php&quot;</span>);<br><br><span class="hljs-variable">$webbot_email_address</span> = <span class="hljs-string">&quot;mail@server.com&quot;</span>;<br><span class="hljs-variable">$notification_email_address</span> = <span class="hljs-string">&quot;mail@server.com&quot;</span>;<br><span class="hljs-variable">$target_web_site</span> = <span class="hljs-string">&quot;www.website.com&quot;</span>;<br><br><span class="hljs-variable">$download_array</span> = <span class="hljs-title function_ invoke__">http_get</span>(<span class="hljs-variable">$target_web_site</span>, <span class="hljs-variable">$ref</span>=<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-variable">$web_page</span> = <span class="hljs-variable">$download_array</span>[<span class="hljs-string">&#x27;FILE&#x27;</span>];<br><br><span class="hljs-variable">$new_signature</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$web_page</span>);<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select SIGNATURE from signatures where WEB_PAGE=&#x27;&quot;</span>.<span class="hljs-variable">$target_web_site</span><span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$old_signature</span>) = <span class="hljs-title function_ invoke__">exe_sql</span>(DATABASE, <span class="hljs-variable">$sql</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$new_signature</span> != <span class="hljs-variable">$old_signature</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$data_array</span>)) <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$data_signature</span>);<br>    <span class="hljs-variable">$data_array</span>[<span class="hljs-string">&#x27;SIGNATURE&#x27;</span>] = <span class="hljs-variable">$new_signature</span>;<br>    <span class="hljs-title function_ invoke__">update</span>(DATABASE, <span class="hljs-variable">$table</span>=<span class="hljs-string">&quot;signatures&quot;</span>, <span class="hljs-variable">$data_array</span>, <span class="hljs-variable">$key_column</span>=<span class="hljs-string">&quot;WEB_PAGE&quot;</span>, <span class="hljs-variable">$id</span>=<span class="hljs-variable">$target_web_site</span>);<br><br>    <span class="hljs-variable">$subject</span> = <span class="hljs-variable">$target_web_site</span>.<span class="hljs-string">&quot;內容改變&quot;</span>;<br>    <span class="hljs-variable">$message</span> = <span class="hljs-variable">$subject</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    ...<br>    <span class="hljs-variable">$address</span>[<span class="hljs-string">&#x27;from&#x27;</span>] = <span class="hljs-variable">$webbot_email_address</span>;<br>    <span class="hljs-variable">$address</span>[<span class="hljs-string">&#x27;replayto&#x27;</span>] = <span class="hljs-variable">$webbot_email_address</span>;<br>    <span class="hljs-variable">$address</span>[<span class="hljs-string">&#x27;to&#x27;</span>] = <span class="hljs-variable">$notification_email_address</span>;<br>    <span class="hljs-title function_ invoke__">formatted_mail</span>(<span class="hljs-variable">$subject</span>, <span class="hljs-variable">$message</span>, <span class="hljs-variable">$address</span>, <span class="hljs-variable">$content_type</span>=<span class="hljs-string">&quot;text/plain&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><strong>別讓垃圾郵件篩選程式，篩選掉合法郵件</strong><br>確保from與reply-to是相同網域<br><strong>發送HTML格式化的電子郵件</strong></li></ul><ol><li>利用formatted_mail()函式  </li><li>設定$content_type為text&#x2F;html  </li><li>使用完整形式的URL  </li><li>使用標準格式技術(如：table)  </li><li>避免使用CSS  </li><li>將訊息建立成一個字串</li></ol><ul><li>進一步的探索</li></ul><h3 id="Chapter-16-將某個網站功能轉換成函式"><a href="#Chapter-16-將某個網站功能轉換成函式" class="headerlink" title="Chapter 16. 將某個網站功能轉換成函式"></a>Chapter 16. 將某個網站功能轉換成函式</h3><ul><li>撰寫一個函式的介面<br>提交郵遞區號，回傳詳細資訊<br>ref. chapter16_website_to_function_bot.php  </li><li>最終的想法</li></ul><ol><li>分配資源：利用多台伺服器的資源  </li><li>使用標準介面：跨平台的能力  </li><li>設計一個自訂的輕量級”網路服務”</li></ol><h2 id="Part-III-進階技術的相關考量"><a href="#Part-III-進階技術的相關考量" class="headerlink" title="Part III 進階技術的相關考量"></a>Part III 進階技術的相關考量</h2><h3 id="Chapter-17-網路蜘蛛"><a href="#Chapter-17-網路蜘蛛" class="headerlink" title="Chapter 17. 網路蜘蛛"></a>Chapter 17. 網路蜘蛛</h3><p>網路蜘蛛: Spider, web spider, crawlers, web walker</p><ul><li><p>網路蜘蛛的工作原理<br>seed URL 抓取第一個頁面(第一滲透層the first penetration level)，重複抓取直到最大滲透層</p></li><li><p>網路蜘蛛的範例<br>ref. chapter17_simple_spider.php  </p></li><li><p>LIB_simple_spider<br>harvest_links($url):下載指定的網頁，回傳link array<br>archive_links($spider_array, $penetration_level, $temp_link_array):標記level與排除exclusion_list中的url<br>get_domain($url):抓取根網域<br>exclude_link($spider_array, $link):排除不需要的鏈結  </p></li><li><p>利用網路蜘蛛進行一些實驗<br>三個警告：</p></li></ul><ol><li>$FETCH_DELAY至少設定1~2秒以避免DoS  </li><li>滲透層的最大值保持1或2避免記憶體用盡  </li><li>使用terminal進行，不要透過瀏覽器</li></ol><ul><li><p>加上負載程式<br>實際要執行的程式內容</p></li><li><p>進一步的探索</p></li></ul><ol><li>將鏈結儲存到資料庫中  </li><li>將取得鏈結的程式，與負載程式區隔開來  </li><li>利用多部電腦分散工作  </li><li>規範管理頁面請求</li></ol><h3 id="Chapter-18-採購用網路機器人與狙擊程式"><a href="#Chapter-18-採購用網路機器人與狙擊程式" class="headerlink" title="Chapter 18. 採購用網路機器人與狙擊程式"></a>Chapter 18. 採購用網路機器人與狙擊程式</h3><ul><li>採購用網路機器人理論<br>流程：<br>取得採購商品的條件 -&gt; 買家身份認證 -&gt; 對採購項目進行確認<br>-&gt; 價格可接受嗎？&#x2F;庫存有需求嗎？&#x2F;非買不可嗎？ -&gt; 進行採購<br>-&gt; 評估結果 -&gt; 完成                          </li><li>狙擊程式(Sniper)理論<br>利用時間作為觸發事件的機器人<br>流程：<br>取得採購商品的條件 -&gt; 買家身份認證 -&gt; 對採購項目進行確認<br>-&gt; 時鐘同步 -&gt; 出價的時間點到了嗎？ -&gt; 送出你的報價<br>-&gt; 評估結果 -&gt; 完成</li></ul><p>取得伺服器時間設定：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;LIB_http.php&quot;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;LIB_parse.php&quot;</span>);<br><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://www.schrenk.com&quot;</span>;<br><br><span class="hljs-variable">$header_array</span> = <span class="hljs-title function_ invoke__">http_header</span>(<span class="hljs-variable">$target</span>, <span class="hljs-variable">$ref</span>=<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-variable">$local_server_time</span> = <span class="hljs-title function_ invoke__">return_between</span>(<span class="hljs-variable">$header_array</span>[<span class="hljs-string">&#x27;FILE&#x27;</span>], <span class="hljs-variable">$start</span>=<span class="hljs-string">&quot;Date:&quot;</span>, <span class="hljs-variable">$stop</span>=<span class="hljs-string">&quot;\n&quot;</span>, EXCL);<br><span class="hljs-variable">$local_server_time_ts</span> = <span class="hljs-title function_ invoke__">strtotime</span>(<span class="hljs-variable">$local_server_time</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\nReturned header:\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$header_array</span>[<span class="hljs-string">&#x27;FILE&#x27;</span>].<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Parsed server timestamp = &quot;</span>.<span class="hljs-variable">$local_server_time_ts</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Formatted server time = &quot;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-variable">$local_server_time_ts</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>對你自己的網路機器人與狙擊程式進行測試  </li><li>進一步的探索</li><li>最終的想法</li></ul><h3 id="Chapter-19-網路機器人與密碼術"><a href="#Chapter-19-網路機器人與密碼術" class="headerlink" title="Chapter 19. 網路機器人與密碼術"></a>Chapter 19. 網路機器人與密碼術</h3><ul><li>設計一個能使用加密功能的網路機器人<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">http_get</span><span class="hljs-params">(<span class="hljs-string">&quot;https://...&quot;</span>, <span class="hljs-variable">$referer</span>)</span></span><br></code></pre></td></tr></table></figure></li><li>對Web網路加密的快速綜覽<br>handshake過程確認使用的加密演算法，客戶端取得伺服器端回傳的CA(Certificate authority)、公鑰等資訊，客戶端使用公鑰進行加密回傳，伺服器利用回傳的訊息建立session憑證。</li></ul><p>忽略認證動作：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">curl_setopt(<span class="hljs-symbol">$c</span>h, CURLOPT_SSL_VERIFIYHOST, <span class="hljs-literal">FALSE</span>);<br>curl_setopt(<span class="hljs-symbol">$c</span>h, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">FALSE</span>);<br></code></pre></td></tr></table></figure><p>設定認證動作：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">curl<span class="hljs-constructor">_setopt($<span class="hljs-params">ch</span>, CURLOPT_SSL_VERIFYPEER, TRUE)</span>;<br>curl<span class="hljs-constructor">_setopt($<span class="hljs-params">ch</span>, CURLOPT_CAINFO, $<span class="hljs-params">file_name</span>)</span>; <span class="hljs-comment">//憑證檔案</span><br></code></pre></td></tr></table></figure><ul><li>最終的想法<br>使用正確的協定，表單action有可能為http&#x2F;https，</li></ul><h3 id="Chapter-20-身份證認"><a href="#Chapter-20-身份證認" class="headerlink" title="Chapter 20. 身份證認"></a>Chapter 20. 身份證認</h3><ul><li><p>身份認證是什麼？<br>證明你是誰的過程</p></li><li><p>script腳本範例與練習網頁<br>練習網頁：</p></li></ul><table><thead><tr><th>身份認證方法</th><th>練習網頁的位置</th></tr></thead><tbody><tr><td>基本身份認證</td><td><a href="http://www.webbotsspidersscreenscrapers.com/basic_authentication">http://www.WebbotsSpidersScreenScrapers.com/basic_authentication</a></td></tr><tr><td>Cookies Sessions</td><td><a href="http://www.webbotsspidersscreenscrapers.com/cookie_authentication">http://www.webbotsspidersscreenscrapers.com/cookie_authentication</a></td></tr><tr><td>Query Sessions</td><td><a href="http://www.webbotsspidersscreenscrapers.com/query_authentication">http://www.webbotsspidersscreenscrapers.com/query_authentication</a></td></tr></tbody></table><p>帳號密碼：webbot &#x2F; sp1der3</p><ul><li><p>基本身份認證<br>realm(領域)：受保護的範圍，一般來說為當前的伺服器目錄，以及子目錄下的所有網頁。<br>基本身份證認的缺點：<br>除了關閉瀏覽器，沒有其他登出的方法。<br>表單外觀無法改變(根據瀏覽器實作)。<br>明碼傳送資訊，安全性低。(可透過digest authentication補強，加入128-bits MD5，但支援度低)。<br>ref. chapter20-1_basic_authentication.php</p></li><li><p>session認證<br>兩種方法：cookie與query string</p></li></ul><p><strong>Cookie Session進行身份認證</strong><br>Cookie的工作原理：<br>cookie於HTTP header中，當client端向server端發出請求時，檢查cookie值是否正確。<br>若不正確則伺服器向使用者要求憑證並將session值保存於cookie中。<br>ref. chapter20-2_cookie_session_authentication.php</p><p><strong>以Query Session進行身份認證</strong><br>有些瀏覽器限制cookie使用。<br>ref. chapter20-3_query_session_authentication.php</p><ul><li>最終的想法<br>需要搭配加密傳輸。<br>留意登入條件不要隨意散播，防止留下紀錄。<br>網站可能結合多種認證，確認所有認證方案。</li></ul><h3 id="Chapter-21-進階的Cookie管理"><a href="#Chapter-21-進階的Cookie管理" class="headerlink" title="Chapter 21. 進階的Cookie管理"></a>Chapter 21. 進階的Cookie管理</h3><ul><li>Cookie的工作原理<br>網際網路為無狀態(stateless)環境<br>Cookie兩種類型：</li></ul><ol><li>臨時性(temporary)  </li><li>持久性(Permanent)  <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">setcookie(<span class="hljs-string">&quot;TemporaryCookie&quot;</span>, <span class="hljs-string">&quot;66&quot;</span>)<span class="hljs-comment">;</span><br>setcookie(<span class="hljs-string">&quot;PermanentCookie&quot;</span>, <span class="hljs-string">&quot;88&quot;</span>, time()<span class="hljs-number">+3600</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure>透過Http Header傳送cookie</li></ol><ul><li><p>PHP&#x2F;CURL和Cookie  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>讀取cookie<br>include(<span class="hljs-string">&quot;LIB_http.php&quot;</span>); <span class="hljs-regexp">//</span>define(<span class="hljs-string">&quot;COOKIE_FILE&quot;</span>, <span class="hljs-string">&quot;c:\cookie.txt&quot;</span>);<br><span class="hljs-variable">$target</span>=<span class="hljs-string">&quot;http://www.WebbotSpidersScreenSrapers.com/Listing_21_1.php&quot;</span><br>http_get(<span class="hljs-variable">$target</span>, <span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><p>不同瀏覽器維護自定義的cookie結構，瀏覽器間的cookie不相容。  </p></li><li><p>Cookie對網路機器人設計帶來了什麼挑戰？<br>cookie可以由使用者關閉，非強制項目。<br>在cookie傳遞的資料與Get&#x2F;Post傳遞的內容一樣重要。<br><strong>清除臨時性Cookie</strong><br>PHP&#x2F;CURL將cookie寫入檔案，需要自行檢查是否過期。<br>或者設定下列屬性：  </p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">curl_setopt(<span class="hljs-symbol">$s</span>, CURLOPT_COOKIESESSION, <span class="hljs-literal">TRUE</span>);<br></code></pre></td></tr></table></figure></li></ul><p><strong>管理多使用者的Cookie</strong></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$s</span> = curl_init();</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$cookie</span>_file = &quot;c:\bots\&quot;.$username.&quot;cookies.txt&quot;;</span><br>curl_setopt(<span class="hljs-symbol">$</span>s, CURLOPT_COOKIEFILE, <span class="hljs-symbol">$</span>cookie_file); <span class="hljs-comment">//讀取</span><br>curl_setopt(<span class="hljs-symbol">$</span>s, CURLOPT_COOKIEJAR, <span class="hljs-symbol">$</span>cookie_file); <span class="hljs-comment">//寫入</span><br><br>curl_setopt(<span class="hljs-symbol">$</span>s, CURLOPT_URL, <span class="hljs-symbol">$</span>target);<br>curl_setopt(<span class="hljs-symbol">$</span>s, CURLOPT_RETURNTRANSFER, TURE); <span class="hljs-comment">//以字串傳送</span><br><br>culr_setopt(<span class="hljs-symbol">$</span>s, CURLOPT_SSL_VERIFYPEER, FALSE);<br>culr_setopt(<span class="hljs-symbol">$</span>s, CURLOPT_FOLLOWLOCATION, TURE);<br>culr_setopt(<span class="hljs-symbol">$</span>s, CURLOPT_MAXREDIRS, <span class="hljs-number">4</span>);<br><br><span class="hljs-meta"><span class="hljs-keyword">$downloaded</span>_page = curl_exec($s);</span><br>curl_close(<span class="hljs-symbol">$</span>s);<br></code></pre></td></tr></table></figure><ul><li>進一步的探索</li></ul><ol><li>設計可讀取header的script，增加cookie管理能力。  </li><li>若無法在運行伺服器上寫入檔案，可以寫入DB。  </li><li>自動刪除臨時性cookie的script。  </li><li>透過瀏覽器巨集自動管理cookie。</li></ol><h3 id="Chapter-22-網路機器人與網路蜘蛛排程"><a href="#Chapter-22-網路機器人與網路蜘蛛排程" class="headerlink" title="Chapter 22. 網路機器人與網路蜘蛛排程"></a>Chapter 22. 網路機器人與網路蜘蛛排程</h3><ul><li>為網路機器人排程，做好準備工作<br>使用批次檔  </li><li>Windows XP工作排程器<br>系統工具&gt;工作排程器  </li><li>Windows 7工作排程器<br>控制台&gt;工作排程器  </li><li>不以日曆為基礎的觸發方式<br>使用e-mail進行觸發  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;LIB_pop3.php&quot;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;SERVER&quot;</span>, <span class="hljs-string">&quot;your.mailserver.net&quot;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;USER&quot;</span>, <span class="hljs-string">&quot;your@email.com&quot;</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;PASS&quot;</span>, <span class="hljs-string">&quot;your_passeord&quot;</span>);<br><span class="hljs-variable">$webbot_path</span> = <span class="hljs-string">&quot;C:\\webbots\\view_competitor.bat&quot;</span>;<br><br><span class="hljs-variable">$connection_array</span> = <span class="hljs-title function_ invoke__">POP3_connect</span>(SERVER, USER, PASS);<br><span class="hljs-variable">$POP3_connection</span> = <span class="hljs-variable">$connection_array</span>[<span class="hljs-string">&#x27;handle&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$POP3_connection</span>)&#123;<br>  <span class="hljs-variable">$email_array</span> = <span class="hljs-title function_ invoke__">POP3_list</span>(<span class="hljs-variable">$POP3_connection</span>);<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$xx</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$xx</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$email_array</span>); <span class="hljs-variable">$xx</span>++)&#123;<br>    <span class="hljs-keyword">list</span>(<span class="hljs-variable">$mail_id</span>, <span class="hljs-variable">$size</span>) = <span class="hljs-title function_ invoke__">expode</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$email_array</span>[<span class="hljs-variable">$xx</span>]);<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">POP3_retr</span>(<span class="hljs-variable">$POP3_connection</span>, <span class="hljs-variable">$mail_id</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$message</span>, <span class="hljs-string">&quot;Subject: Run the webbot&quot;</span>))&#123;<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$webbot_path</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;<span class="hljs-subst">$output</span>&lt;/pre&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">POP3_delete</span>(<span class="hljs-variable">$POP3_connection</span>, <span class="hljs-variable">$mail_id</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>最終的想法</li></ul><ol><li>為機器人訂出最恰當的執行週期  </li><li>避免單點故障  </li><li>增加排成變化的多樣性</li></ol><h3 id="Chapter-23-使用瀏覽器巨集擷取難度較高的網站"><a href="#Chapter-23-使用瀏覽器巨集擷取難度較高的網站" class="headerlink" title="Chapter 23. 使用瀏覽器巨集擷取難度較高的網站"></a>Chapter 23. 使用瀏覽器巨集擷取難度較高的網站</h3><p>AJAX前，微軟的ActiveX落實XMLHTTP應用，搭配DHTML可提供毋須更新頁面的內容更新。<br>2006年W3C建立AJAX官方標準  </p><ul><li>有效擷取網站資料時所遇到的障礙</li></ul><p>AJAX：URL與內容不再是一對一關係。<br>可能難以達到以下工作：  </p><ol><li>將滑鼠游標移到某個日曆上，然後選定一個日期  </li><li>捲動圖像側邊欄，選定某個特定的縮圖  </li><li>用拖放的方式選擇某個物件  </li><li>緩慢的輸入文字到文字框中，等待拼字檢查器給我們拼字的建議</li></ol><p>怪異的JavaScript和Cookie行為：某些情況下，網頁利用JavaScript建立另一個JavaScript，最終被用來寫入cookie或是控制表單行為。或者網頁會將圖像寫入cookie。</p><p>Flash：內部為封閉的環境</p><ul><li>運用瀏覽器巨集，克服網路資料擷取的障礙<br>使用script腳本來控制瀏覽器的動作。<br>iMacros瀏覽器巨集：<br>建議指令<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata">&#x27; 註解的寫法<br><span class="hljs-keyword">SET</span> !TIMEOUT 240<br><span class="hljs-keyword">SET</span> !ERRORIGNORE YES <span class="hljs-comment">//忽略錯誤訊息</span><br><span class="hljs-keyword">SET</span> !EXTRACT_TEST_POPUP <span class="hljs-keyword">NO</span><br>FILTER <span class="hljs-keyword">TYPE</span>=IMAGES STATUS=<span class="hljs-keyword">ON</span><br><span class="hljs-keyword">CLEAR</span><br><span class="hljs-keyword">TAB</span> T=1<br><span class="hljs-keyword">TAB</span> CLOSEALLOTHERS<br></code></pre></td></tr></table></figure></li><li>最終的想法</li></ul><h3 id="Chapter-24-深度應用iMacros"><a href="#Chapter-24-深度應用iMacros" class="headerlink" title="Chapter 24. 深度應用iMacros"></a>Chapter 24. 深度應用iMacros</h3><ul><li>深入到iMacros中，添加額外的功能<br>寫一個script動態建立瀏覽器巨集<br>利用iMacros載入本地端網站伺服器網頁</li></ul><p><strong>不使用iMacors腳本引擎(付費版)的原因：</strong><br>此腳本以COM為基礎，跨平台性較差<br>雖然可以接受本機檔案，但與資料庫或其他網站的外部資料無發搭配很好<br>並沒有其他好處</p><p><strong>建立動態巨集</strong><br>範例：競品價格追蹤  </p><ol><li>使用iMacors和動態巨集，寫一個能模擬實際瀏覽器使用者的網路機器人。</li><li>開發一個能讀取內部資料庫的PHP script腳本，找出銷售最佳的前100項商品，然後寫出一個合適的巨集，取得這些商品在競爭者那邊所賣的價格。</li><li>寫個能從競爭者網頁中解析出價格的PHP script腳本。</li></ol><p>寫一個能建立動態巨集的script腳本</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;#####################<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;# HEADER (defaults, etc.)<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;#####################<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;SET !TIMEOUT 240<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;SET !ERRORIGNORE YES<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;SET !EXTRACT_TEST_POPUP NO<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;FILTER TYPE=IMAGES STATUS=ON<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;CLEAR<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;TABT= 1<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;TAB CLOSEALLOTHERS<span class="hljs-subst">\n</span>&quot;</span>;<br><span class="hljs-variable">$macro</span><span class="hljs-operator">=</span><span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;#####################<span class="hljs-subst">\n</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>將外部資料整合到動態建立的巨集中</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">for</span>(<span class="hljs-variable">$xx</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>; <span class="hljs-variable">$xx</span><span class="hljs-operator">&lt;</span>count(<span class="hljs-variable">$product_array</span>); <span class="hljs-variable">$xx</span><span class="hljs-operator">++</span>)&#123;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27; Get URL of competitor&#x27;s product page<span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$competing_product_information</span> <span class="hljs-operator">=</span> <span class="hljs-comment">//URL</span><br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;<span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;Add random delay<span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;WAIT SECONDS=&quot;</span>.sleep(rand(<span class="hljs-number">5</span>,<span class="hljs-number">15</span>)).<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;<span class="hljs-subst">\n</span>&quot;</span><br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27; Capture the competitor&#x27;s web page with product information<span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;GOTO URL=$competitor_product_information <span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;SAVE TYPE=HTM FOLDER=* FILE=search_results <span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;<span class="hljs-subst">\n</span>&quot;</span><br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;Run the parsing software in secondary browser tab<span class="hljs-subst">\n</span>&quot;</span><br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;TAB T=2&quot;</span><br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;URL GOTO=http://localhost/parser.php?if=&quot;</span>.<span class="hljs-variable">$product_arrat</span>[<span class="hljs-variable">$xx</span>][&#x27;<span class="hljs-type">ASIN</span>&#x27;].<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>; <span class="hljs-comment">//呼叫本地端parser</span><br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27;<span class="hljs-subst">\n</span>&quot;</span><br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;&#x27; Resume in original browser tab<span class="hljs-subst">\n</span>&quot;</span>;<br>  <span class="hljs-variable">$macro</span> <span class="hljs-operator">=</span> <span class="hljs-variable">$macro</span>.<span class="hljs-string">&quot;TAB T=1 <span class="hljs-subst">\n</span>&quot;</span>;<br>&#125;<br>file_put_contents(<span class="hljs-string">&quot;//PATH/MACRO_NAME.iim&quot;</span>, <span class="hljs-variable">$macro</span>);<br></code></pre></td></tr></table></figure><p><strong>自動執行iMacros巨集</strong><br>在windows中啟動iMacros</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">//run.bat</span><br><span class="hljs-symbol">php</span> create_macro.php<br><span class="hljs-symbol">start</span> /<span class="hljs-keyword">B</span> <span class="hljs-string">&quot;C:\Program Files\Mozilla Firefox\firefox.exe&quot;</span> http:<span class="hljs-comment">//127.0.0.1</span><br><span class="hljs-symbol">ping</span> <span class="hljs-number">127</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-comment">//delay</span><br><span class="hljs-symbol">start</span> /<span class="hljs-keyword">B</span> <span class="hljs-string">&quot;C:\Program Files\Mozilla Firefox\firefox.exe&quot;</span> http:<span class="hljs-comment">//run.imacros.net/?m=test.iim</span><br></code></pre></td></tr></table></figure><p>在Linux中啟動iMacros</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//run.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;firefox http://run.imacros.net/?m=test.iim&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>進一步的探索<br>其他技巧：</li></ul><ol><li>將firefox設為預設瀏覽器，且不做其他用途  </li><li>多個iMacros script不能在同一個桌面帳號執行，必須錯開時間，或者錯開使用者  </li><li>可能需要登入安全網站，多瞭解iMacros對登入憑證加密的能力  </li><li>IE版的iMacros不能支援分頁的功能</li></ol><h3 id="Chapter-25-部署與規模擴展"><a href="#Chapter-25-部署與規模擴展" class="headerlink" title="Chapter 25. 部署與規模擴展"></a>Chapter 25. 部署與規模擴展</h3><ul><li>一對多的環境<br>一個機器人接受多個輸入資源<br>可以試著運用平行運算  </li><li>一對一的環境<br>難以擴展規模<br>最大的挑戰在於如何避免機器人被當作具有攻擊意圖的對象  </li><li>多對多的環境<br>可能是同一個script腳本的多個實體  </li><li>多對一的環境<br>最難以擴展的架構<br>不小心就會發動DoS攻擊  </li><li>規模擴展與服務阻斷攻擊<br>避免不小心發動了DoS<br>就算是很簡單的網路機器人，也能塞爆網站<br>目標網站本身沒效率<br>規模越擴展，問題越嚴重：尤其多對一架構可能造成目標網站癱瘓，但是優點是可以使用多個IP位置  </li><li>為一個網路機器人建立多個執行實體<br>三種方法：</li></ul><ol><li>用fork的方法複製出另一個額外的process  </li><li>在作業系統中建立同一個script的多個實體  </li><li>在多個硬體上執行相同的網路機器人：機器人網路(Botnet)</li></ol><ul><li>Botnet的管理<br>Botnet的溝通方式：與管理的伺服器進行溝通，管理伺服器進行工作安排</li></ul><ol><li><p>以Polling的方式與Botnet伺服器溝通</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;LIB_http.php&#x27;</span>);<br><span class="hljs-variable">$post_array</span>[<span class="hljs-string">&#x27;STATUS&#x27;</span>] = <span class="hljs-string">&quot;TASK REQUEST&quot;</span>;<br><span class="hljs-variable">$post_array</span>[<span class="hljs-string">&#x27;BOT&#x27;</span>] = <span class="hljs-string">&quot;this webbot&#x27;s name&quot;</span>;<br><span class="hljs-variable">$post_array</span>[<span class="hljs-string">&#x27;VERSION&#x27;</span>] = <span class="hljs-string">&quot;script version level&quot;</span>;<br><span class="hljs-variable">$botnet_server_address</span> = <span class="hljs-string">&quot;https://.BOTNET_SERVER_ADDRESS&quot;</span>;<br><span class="hljs-variable">$reply</span> = <span class="hljs-title function_ invoke__">http_post_form</span>(<span class="hljs-variable">$botnet_server_address</span>, <span class="hljs-variable">$post_array</span>);<br></code></pre></td></tr></table></figure></li><li><p>判斷是否有工作要執行<br>伺服器先判斷網路機器人的身份(名稱與憑證)，衡量伺服器負載能力。</p></li><li><p>Checkout程序<br>伺服器指派工作給網路機器人，設定時限。</p></li><li><p>指派工作<br>透過XML格式提供訊息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TASK_ID</span>&gt;</span>9999<span class="hljs-tag">&lt;/<span class="hljs-name">TASK_ID</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TIMESTAMP</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">TIMESTAMP</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TARGET</span>&gt;</span>www.SomeWebSite.com<span class="hljs-tag">&lt;/<span class="hljs-name">TARGET</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">USERNAME</span>&gt;</span>username<span class="hljs-tag">&lt;/<span class="hljs-name">USERNAME</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">PASSWORD</span>&gt;</span>password<span class="hljs-tag">&lt;/<span class="hljs-name">PASSWORD</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解析Botnet伺服器回傳的訊息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$task_id</span> = <span class="hljs-title function_ invoke__">return_between</span>(<span class="hljs-variable">$reply</span>[<span class="hljs-string">&#x27;PAGE&#x27;</span>], <span class="hljs-string">&quot;&lt;TASK_ID&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;/TASK_ID&gt;&quot;</span>, EXCL);<br><span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">return_between</span>(<span class="hljs-variable">$reply</span>[<span class="hljs-string">&#x27;PAGE&#x27;</span>], <span class="hljs-string">&quot;&lt;TARGET&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;/TARGET&gt;&quot;</span>, EXCL);<br><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">return_between</span>(<span class="hljs-variable">$reply</span>[<span class="hljs-string">&#x27;PAGE&#x27;</span>], <span class="hljs-string">&quot;&lt;USERNAME&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;/USERNAME&gt;&quot;</span>, EXCL);<br><span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">return_between</span>(<span class="hljs-variable">$reply</span>[<span class="hljs-string">&#x27;PAGE&#x27;</span>], <span class="hljs-string">&quot;&lt;PASSWORD&gt;&quot;</span>, <span class="hljs-string">&quot;&lt;/PASSWORD&gt;&quot;</span>, EXCL);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>沒任務的範例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">XML</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TASK_ID</span>&gt;</span>NO TASK<span class="hljs-tag">&lt;/<span class="hljs-name">TASK_ID</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TIMESTAMP</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">TIMESTAMP</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">XML</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>執行工作  </p></li><li><p>將擷取到的資料上傳給伺服器  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>&lt;<span class="hljs-string">&#x27;LIB_http.php&#x27;</span>);<br><span class="hljs-variable">$post_array</span>[<span class="hljs-string">&#x27;STATUS&#x27;</span>] = <span class="hljs-string">&quot;DATA_COLLECTED&quot;</span>;<br><span class="hljs-variable">$post_array</span>[<span class="hljs-string">&#x27;BOT&#x27;</span>] = <span class="hljs-string">&quot;this webbot&#x27;s name&quot;</span>;<br><span class="hljs-variable">$post_array</span>[<span class="hljs-string">&#x27;VERSION&#x27;</span>] = <span class="hljs-string">&quot;script version level&quot;</span>;<br><span class="hljs-variable">$botnet_server_address</span> = <span class="hljs-string">&quot;https://&quot;</span>.BOTNET_SERVER_ADDRESS;<br><span class="hljs-variable">$reply</span> = <span class="hljs-title function_ invoke__">http_post_form</span>(<span class="hljs-variable">$botnet_server_address</span>, <span class="hljs-variable">$post_array</span>);<br></code></pre></td></tr></table></figure></li><li><p>處理擷取到的資料<br>將回傳資料保存在資料結構或者資料庫中。<br>伺服器可能會留下一些log。</p></li></ol><ul><li>進一步的探索<br>如何增加待完成工作列表到Botnet伺服器？：透過API輸入？<br>Botnet伺服器的最大能力？<br>掩人耳目的網路機器人，使用代理或其他技術？<br>自動從伺服器下載軟體更新。</li></ul><h2 id="Part-IV-比較大的考量"><a href="#Part-IV-比較大的考量" class="headerlink" title="Part IV 比較大的考量"></a>Part IV 比較大的考量</h2><h3 id="Chapter-26-能掩人耳目的網路機器人"><a href="#Chapter-26-能掩人耳目的網路機器人" class="headerlink" title="Chapter 26. 能掩人耳目的網路機器人"></a>Chapter 26. 能掩人耳目的網路機器人</h3><ul><li><p>為什麼要設計出能掩人耳目的網路機器人？<br>避免被當作駭客攻擊：<br>Log記錄檔案的三種類型：存取log紀錄、錯誤log紀錄、自訂log紀錄<br>Log監視軟體</p></li><li><p>“掩人耳目”，就意味著要模仿人類的行為模式<br>善待你的資料來源<br>選擇在比較繁忙時，執行你的網路機器人<br>別老是在每天的同一個時間，執行你的網路機器人<br>別在假期和週末執行你的網路機器人<br>在取得網頁和網頁之間，插入隨機的延遲時間  </p></li><li><p>最終的想法</p></li></ul><h3 id="Chapter-27-代理伺服器"><a href="#Chapter-27-代理伺服器" class="headerlink" title="Chapter 27. 代理伺服器"></a>Chapter 27. 代理伺服器</h3><ul><li>什麼是代理伺服器<br>代理你做某件事的某個東西  </li><li>在虛擬世界中的代理伺服器<br>列印機代理伺服器、內容過濾伺服器、防火牆</li><li>為什麼網路機器人的開發者要使用代理伺服器<br>運用代理伺服器達到匿名的效果<br>使用代理伺服器可以假裝你在別的地方</li><li>使用代理伺服器<br>在瀏覽器中使用代理伺服器<br>透過PHP&#x2F;CURL來使用代理伺服器<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> <span class="hljs-variable">$session_id</span> = curl_init()<br>curl_setopt(<span class="hljs-variable">$session_id</span>, CURLOPT_PROXY, <span class="hljs-variable">$proxy_ip</span>.<span class="hljs-string">&quot;: &quot;</span>.<span class="hljs-variable">$proxy_port</span>);<br>curl_setopt(<span class="hljs-variable">$session_id</span>, CURLOPT_PROXY_TYPE, CURLPROXY_SOCKS5); <span class="hljs-regexp">//</span>default: CURL_PROXY_HTTP<br></code></pre></td></tr></table></figure></li><li>代理伺服器的種類</li></ul><ol><li><p>開放式代理伺服器(open proxy)<br><strong>開放式代理伺服器的種類：</strong><br>透明代理伺服器：通常會將IP位置放在HTTP_X_FORWARDED_FORWARDED變數中<br>匿名代理伺服器：不會紀錄原始IP，不過仍然看偵測出經由代理伺服器轉送<br>假冒代理伺服器：試圖隱藏真實伺服器<br><strong>開放式代理伺服器的黑暗面：</strong><br>很少是正當理由開放，有可能是政府機關&#x2F;私人監控，或者私人電腦中毒。<br><strong>關於開放式代理伺服器清單服務的更多訊息：</strong><br>有提供開放代理伺服器清單的服務公司。</p></li><li><p>Tor<br>使用Tor：需要安裝Polipo(執行於電腦中的代理伺服器)<br>設定PHP&#x2F;CURL使用Tor：port為8118<br>Tor的缺點：<br>無法保證完全匿名，網站可能透過JavaScript或瀏覽器外掛跳過Tor的作用。<br>速度較慢。</p></li><li><p>商業化代理伺服器<br>例如：Anonymizer(<a href="http://www.anonymizer.com)、hidemyip(http//HideMyIP.com)">http://www.Anonymizer.com)、HideMyIP(http://HideMyIP.com)</a></p></li></ol><ul><li>最終的想法<br>匿名只是一種有幫助的做法，而不是一種絕對有效的功能<br>建立自己的代理伺服器</li></ul><h3 id="Chapter-28-具有容錯能力的網路機器人"><a href="#Chapter-28-具有容錯能力的網路機器人" class="headerlink" title="Chapter 28. 具有容錯能力的網路機器人"></a>Chapter 28. 具有容錯能力的網路機器人</h3><ul><li>具有容錯能力的網路機器人，幾種不同的類型</li></ul><p>####適應URL的改變：  </p><ol><li>只下載目標網站中確實可取得的頁面<br>避免對已經不存在的頁面提出請求：</li></ol><p><strong>透過HTTP代碼檢查</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;LIB_http.php&quot;</span>);<br><span class="hljs-variable">$page</span> = <span class="hljs-title function_ invoke__">http_get</span>(<span class="hljs-variable">$target</span>=<span class="hljs-string">&quot;www.schrenk.com&quot;</span>, <span class="hljs-variable">$ref</span>=<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$page</span>[<span class="hljs-string">&#x27;STATUS&#x27;</span>][<span class="hljs-string">&#x27;http_code&#x27;</span>]!=<span class="hljs-number">200</span>)<br>  <span class="hljs-title function_ invoke__">error_handler</span>(<span class="hljs-string">&quot;BAD RESULT&quot;</span>, <span class="hljs-variable">$page</span>[<span class="hljs-string">&#x27;STATUS&#x27;</span>][<span class="hljs-string">&#x27;http_code&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>檢查連結路徑</strong><br>確保經由正確路徑進入，而非已過期的連結   </p><p><strong>利用使用者名稱，確認表單提交結果</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;GClassmann&quot;</span>;<br><span class="hljs-variable">$page</span> = http_get(<span class="hljs-variable">$target</span>, <span class="hljs-variable">$ref</span>=<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">if</span>(!stristr(<span class="hljs-variable">$page</span>[<span class="hljs-string">&#x27;FILE&#x27;</span>], <span class="hljs-string">&quot;<span class="hljs-variable">$username</span>&quot;</span>))&#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;authentication error&quot;</span>;<br>    error_handler(<span class="hljs-string">&quot;BAD AUTHENTICATION for &quot;</span>.<span class="hljs-variable">$username</span>, <span class="hljs-variable">$target</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>能隨著標頭的重導向，轉移到已被更新過的頁面<br>HTTP標頭包含location:URL  <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">curl<span class="hljs-constructor">_setopt($<span class="hljs-params">curl_session</span>, CURLOPT_FOLLOWLOCATION, TRUE)</span>;<br>curl<span class="hljs-constructor">_setopt($<span class="hljs-params">curl_session</span>, CURLOPT_MAXREDIRS, 4)</span>;<br></code></pre></td></tr></table></figure></li></ol><p><strong>&lt;head&gt;標籤之間的頁面重導向</strong><br>範例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">countent</span>=<span class="hljs-string">&quot;0; URL=http://www.nostarch.com&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ref. chapter28-1_meta_tag_redirection  </p><ul><li>只搜尋head tag  </li><li>在meta tag中搜尋http-equiv屬性  </li><li>重導向的URL被轉換為一個完整的解析地址  </li><li>找到第一個重導向指令後，script就會停止</li></ul><p><strong>透過JavaScript的重導向</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&#x27;http://www.schrenk.com&#x27;</span>; </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>透過JavaScript的重導向可能會很複雜，不容易被解析(例如function呼叫)。</p><ol start="3"><li>能引用參照的值，指出你所跟隨的連結，是來自於某個仍然存在於網站上的頁面<br>維護引用參照值的正確性。</li></ol><p>####適用頁面內容的改變：</p><ol><li>避免位置解析：可能由於網頁排版改變而無法運作  </li><li>使用相對解析：找出關鍵元素後，再尋找關聯的資訊  </li><li>尋找那些不太可能會發生變化的界標：改變頻率最低的大多是與伺服器應用有關的部分(type&#x3D;”hidden”的資料，或者元素id等)</li></ol><p>####適應表單中的改變：<br>先進行表單診斷<br>檢查表單變數，包含：使用的method、action、名稱與資料<br>ref. chapter28-2_form_parser.php</p><p>####適應cookie的改變：<br>LIP_http函式庫並不會自動刪除過期的cookie  </p><p>####適應網路斷線與網路壅塞的狀況：<br>設定time-out值：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#default is 25s</span><br>curl_setopt($curl_session, CURLOPT_TIMEOUT, $timeout_value)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>PHP延長超時設定</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">set_time_limit</span>(<span class="hljs-number">60</span>);<br><span class="hljs-built_in">set_time_limit</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// remove timeout setting</span><br></code></pre></td></tr></table></figure><ul><li><p>錯誤處理程式<br>錯誤訊息記錄應該包含以下內容：哪一個網路機器人出問題？為什麼出問題？<br>出問題的日期與時間？</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> webbot_error_handler(<span class="hljs-variable">$failure_mode</span>)&#123;<br>    <span class="hljs-variable">$email_address</span> = <span class="hljs-string">&quot;your.account@someserver.com&quot;</span>;<br>    <span class="hljs-variable">$email_subject</span> = <span class="hljs-string">&quot;Webbot Failure Notification&quot;</span>;<br>    <span class="hljs-variable">$email_message</span> = <span class="hljs-string">&quot;Webbot T-Rex encountered a fatal error&lt;br&gt;&quot;</span>;<br>    <span class="hljs-variable">$email_message</span> = <span class="hljs-variable">$email_message</span>.<span class="hljs-variable">$failure_mode</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-variable">$email_message</span> = <span class="hljs-variable">$email_message</span>.<span class="hljs-string">&quot;at&quot;</span>.date(<span class="hljs-string">&quot;r&quot;</span>).<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    mail(<span class="hljs-variable">$email_address</span>, <span class="hljs-variable">$email_subject</span>, <span class="hljs-variable">$email_message</span>);<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>為機器人增加狀態，執行前檢查是否需要執行，若發生錯誤時透過error handler改變狀態<br>以移除排程。</p></li><li><p>進一步的探索</p></li></ul><h3 id="Chapter-29-對網路機器人友善的網站設計"><a href="#Chapter-29-對網路機器人友善的網站設計" class="headerlink" title="Chapter 29. 對網路機器人友善的網站設計"></a>Chapter 29. 對網路機器人友善的網站設計</h3><ul><li><p>針對搜尋引擎的網路蜘蛛，進行網頁的最佳化(搜尋引擎最佳化, SEO)<br>定義良好的鏈結<br>Google Bombs與Spam Indexing：針對特定網站，利用相同的鏈結文字描述建立出多個鏈結<br>Title標籤<br>Meta標籤<br>標題標籤(h1~h6)<br>圖像的alt屬性  </p></li><li><p>會妨礙到搜尋引擎網路蜘蛛的網頁設計技術<br>JavaScript：執行前難以被辨認<br>非ASCII內容：如Flash  </p></li><li><p>設計”僅含資料”的介面</p></li></ul><p>可擴展標記語言(XML)(ref. chapter29-1_xml_parser.php)  </p><p>輕量級資料交換：需注意安全性問題(如使用eval()直接將回傳內容保存為變數的做法)<br>ref. chapter29-2_light-weight_data_exchange_interface.php  </p><p>簡單物件存取協定(SOAP)：  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//SOAP呼叫範例</span><br><span class="hljs-comment">// PHP5內建SOAP, PHP4需要使用PEAR(PHP extension and Application Repository)</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;inc/PEAR/SOAP&quot;</span>);<br><span class="hljs-variable">$params</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;manufacturer&#x27;</span> =&gt; <span class="hljs-string">&quot;XYZ CORP&quot;</span>,<br>    <span class="hljs-string">&#x27;mode&#x27;</span> =&gt; <span class="hljs-string">&#x27;development&#x27;</span>,<br>    <span class="hljs-string">&#x27;sort&#x27;</span> =&gt; <span class="hljs-string">&#x27;+product&#x27;</span>,<br>    <span class="hljs-string">&#x27;type&#x27;</span> =&gt; <span class="hljs-string">&#x27;heavy&#x27;</span>,<br>    <span class="hljs-string">&#x27;userkey&#x27;</span> =&gt; <span class="hljs-variable">$ACCESS_KEY</span>);<br><span class="hljs-variable">$WSDL</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SOAP_WSDL</span>(<span class="hljs-variable">$ADDRESS_OF_SOAP_INTERFACE</span>);<br>client <span class="hljs-variable">$client</span> = <span class="hljs-variable">$WSDL</span>-&gt;<span class="hljs-title function_ invoke__">getProxy</span>();<br><span class="hljs-variable">$result_array</span> = <span class="hljs-variable">$client</span>-&gt;<span class="hljs-title function_ invoke__">SomeGenericSOAPRequest</span>(<span class="hljs-variable">$params</span>);<br></code></pre></td></tr></table></figure><p>SOAP優點：跨平台<br>SOAP缺點：門檻較高  </p><p>REST(Representational State Transfer)  </p><ul><li>最終的想法</li></ul><h3 id="Chapter-30-獵殺網路蜘蛛"><a href="#Chapter-30-獵殺網路蜘蛛" class="headerlink" title="Chapter 30. 獵殺網路蜘蛛"></a>Chapter 30. 獵殺網路蜘蛛</h3><p>網站擁有者可能為了下面幾種目的，希望隔絕網路機器人：<br>保護智慧財產<br>保護自己的電子郵件地址<br>規範管理網站的使用頻率<br>避免放在網路上的媒體被人保存起來<br>為所有使用者建立公平競爭的環境</p><ul><li><p>和善的提出要求<br>建立服務條款協定<br>使用robots.txt檔案<br>使用Robots Meta標籤  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;robots&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;noindex, nofollow&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>建立速度上的障礙<br>選擇性允許某些網路代理程式，進行存取動作：記得在伺服器端進行檢查<br>使用擾亂(obfuscation)的做法<br>使用cookie、加密、JavaScript與重導向<br>使用者身份認證<br>經常更新你的網站(改變元素順序、表單方法、檔案名稱、參考點文字)<br>將文字嵌入到其他媒體中，如CAPTCHA(Completely Automated Public Turing test to tell Computers and Humans Apart)。 破解：<a href="http://decaptcher.com/">http://decaptcher.com</a>  </p></li><li><p>設下陷阱<br>建立一個捕捉網路蜘蛛的陷阱：人類無法進行的操作  </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;spider_trap.php&quot;</span>&gt;&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;spacer.gif&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure></li></ul><p>對不想要的網路蜘蛛，能做的一些好玩的事  </p><table><thead><tr><th>策略</th><th>相應做法</th></tr></thead><tbody><tr><td>驅逐</td><td>記錄IP之後進行阻擋</td></tr><tr><td>限制存取</td><td>記錄IP之後限制可存取的資源</td></tr><tr><td>誤導</td><td>將網路蜘蛛重導到另一個頁面中</td></tr><tr><td>分析</td><td>識別IP(如：<a href="http://www.arin.net),追蹤擁有者/">http://www.arin.net)，追蹤擁有者</a></td></tr><tr><td>忽略</td><td>忽略所有自動化操作</td></tr></tbody></table><ul><li>最終的想法</li></ul><h3 id="Chapter-31-讓你的網路機器人遠離是非"><a href="#Chapter-31-讓你的網路機器人遠離是非" class="headerlink" title="Chapter 31. 讓你的網路機器人遠離是非"></a>Chapter 31. 讓你的網路機器人遠離是非</h3><ul><li>一切都源自於尊重<br>網站資源都是擁有者付費並非免費資源  </li><li>版權<br>確實向各方進行諮詢<br>暸解版權法的一些基本概念：<br>版權並不需要經過註冊的程序<br>在預設的情況下，創作總是”保留所有權利”<br>不能對一個事實，主張擁有其版權<br>如果能以具有創造性的方式，呈現整群的事實，就可以主張擁有版權<br>在合理使用法(Fair Use Laws)的規範下，可使用部分的內容素材  </li><li>侵入動產<br>過度消耗目標伺服器的頻寬，影響效能或其他人的使用</li><li>網際網路的相關法律<br>維吉尼亞洲反垃圾郵件法(anti-spam)  </li><li>最終的想法</li></ul><h3 id="Appendix-A-PHP-x2F-CURL參考資料"><a href="#Appendix-A-PHP-x2F-CURL參考資料" class="headerlink" title="Appendix A. PHP&#x2F;CURL參考資料"></a>Appendix A. PHP&#x2F;CURL參考資料</h3><ul><li>建立一個最精簡的PHP&#x2F;CURL Session<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">&lt;?<br>$s = curl<span class="hljs-constructor">_init()</span>;<br>curl<span class="hljs-constructor">_setopt($<span class="hljs-params">s</span>, CURLOPT_URL, <span class="hljs-string">&quot;http://www.schrenk.com&quot;</span>)</span>;<br>curl<span class="hljs-constructor">_setopt($<span class="hljs-params">s</span>, CURLOPT_RETURNTRANSFER, TRUE)</span>;<br><br>$downloaded_page = curl<span class="hljs-constructor">_exec($<span class="hljs-params">s</span>)</span>;<br>curl<span class="hljs-constructor">_close($<span class="hljs-params">s</span>)</span>;<br>?&gt;<br></code></pre></td></tr></table></figure></li><li>初始化PHP&#x2F;CURL Session<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">curl_init</span>();<br></code></pre></td></tr></table></figure></li><li>PHP&#x2F;CURL選項設定<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_URL, <span class="hljs-string">&quot;http://www.schrenk.com&quot;</span>); <span class="hljs-regexp">//</span>定義目標網站<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_RETURNTRANSFER, TRUE); <span class="hljs-regexp">//</span>以字串回傳結果<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_REFERER, <span class="hljs-string">&quot;http://www.domain.com/index.php&quot;</span>); <span class="hljs-regexp">//</span>設定參照網址<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_FOLLOWLOCATION, TRUE); <span class="hljs-regexp">//</span>跟隨網站重導向(僅header內容，不包含refresh meta或JavaScript中的設定)，需設定CURLOPT_MAXREDIRS<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_MAXREDIRS, <span class="hljs-number">4</span>); <span class="hljs-regexp">//</span>最大重導向次數<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_USERAGENT, <span class="hljs-string">&quot;Webbot&quot;</span>); <span class="hljs-regexp">//</span>設定代理程式名稱<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_NOBODY, TRUE); <span class="hljs-regexp">//</span>排除body部分<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_HEADER, TRUE); <span class="hljs-regexp">//</span>包含標頭(預設不包含)<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_TIMEOUT, <span class="hljs-number">30</span>); <span class="hljs-regexp">//</span>設定timeout值，單位秒<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_COOKIEFILE, <span class="hljs-string">&quot;c:\bots\cookies.txt&quot;</span>); <span class="hljs-regexp">//</span>讀取cookie檔案<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_COOKIEJAR, <span class="hljs-string">&quot;c:\bots\cookies.txt&quot;</span>); <span class="hljs-regexp">//</span>寫入cookie檔案<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_HTTPHEADER, [<span class="hljs-string">&quot;Mime-Version:1.0&quot;</span>, <span class="hljs-string">&quot;Content-type: text/html; charset=iso-8859-1&quot;</span>, <span class="hljs-string">&quot;Accept-Encoding: compress, gzip&quot;</span>]); <span class="hljs-regexp">//</span>配置HTTP header<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_SSL_VERIFYPEER, FALSE); <span class="hljs-regexp">//</span>設定是否使用客戶端憑證<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_USERPWD, <span class="hljs-string">&quot;passwd&quot;</span>); <span class="hljs-regexp">//</span>設定身份認證密碼<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_UNRESTICTED_AUTH, TRUE); <span class="hljs-regexp">//</span>若有設定重導向需要開啟<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_POST, TRUE); <span class="hljs-regexp">//</span>使用POST<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_POSTFIELDS, <span class="hljs-string">&quot;var1=1&amp;var2=2&quot;</span>); <span class="hljs-regexp">//</span>設定POST內容<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_VERBOSE, FALSE); <span class="hljs-regexp">//</span>關閉詳細模式<br>curl_setopt(<span class="hljs-variable">$s</span>, CURLOPT_PORT, <span class="hljs-number">234</span>); <span class="hljs-regexp">//</span>設定使用的port<br></code></pre></td></tr></table></figure></li><li>執行PHP&#x2F;CURL指令<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">curl_exec</span>();<br><span class="hljs-built_in">curl_getinfo</span>(); <span class="hljs-comment">//檢索PHP/CRUL Session訊息</span><br><span class="hljs-built_in">curl_error</span>(); <span class="hljs-comment">//回傳可能發生在PHP/CURL session期間的錯誤</span><br></code></pre></td></tr></table></figure></li><li>關閉PHP&#x2F;CURL Session<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">curl_close</span>();<br></code></pre></td></tr></table></figure></li></ul><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p><a href="http://www.webbotsspidersscreenscrapers.com/">官方網站</a></p>]]></content>
    
    
    <categories>
      
      <category>閱讀筆記</category>
      
      <category>電腦資訊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>網路爬蟲</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
